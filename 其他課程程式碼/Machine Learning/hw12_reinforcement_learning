{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"hw12_reinforcement_learning","provenance":[{"file_id":"https://github.com/ga642381/ML2021-Spring/blob/main/HW12/HW12_ZH.ipynb","timestamp":1623322901383}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"ee93c9a95f5c49168df8c3149fae0a1b":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_432705b7d1b94c2e9c1af650fdbb61f5","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_134d67b6c3a34af09af7f30a65b2c7aa","IPY_MODEL_72e0cd17ffcf45f48728c5afb6fb27ec"]}},"432705b7d1b94c2e9c1af650fdbb61f5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"134d67b6c3a34af09af7f30a65b2c7aa":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_f93ec91ec6b147ebb4f3088d65d02159","_dom_classes":[],"description":"Total:  3856.9, Final:  80.0: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":500,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":500,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_f1d335565f574d2b9999242c80e017a2"}},"72e0cd17ffcf45f48728c5afb6fb27ec":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_32dd67272a904e2ba7d7bae9caed0e32","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 500/500 [22:26&lt;00:00,  2.69s/it]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_90e9a3b0f5ca42d0af9306233ef17e01"}},"f93ec91ec6b147ebb4f3088d65d02159":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"f1d335565f574d2b9999242c80e017a2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"32dd67272a904e2ba7d7bae9caed0e32":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"90e9a3b0f5ca42d0af9306233ef17e01":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"Fp30SB4bxeQb"},"source":["# **Homework 12 - Reinforcement Learning**\n","\n","若有任何問題，歡迎來信至助教信箱 ntu-ml-2021spring-ta@googlegroups.com\n","\n"]},{"cell_type":"markdown","metadata":{"id":"yXsnCWPtWSNk"},"source":["## 前置作業\n","\n","首先我們需要安裝必要的系統套件及 PyPi 套件。\n","gym 這個套件由 OpenAI 所提供，是一套用來開發與比較 Reinforcement Learning 演算法的工具包（toolkit）。\n","而其餘套件則是為了在 Notebook 中繪圖所需要的套件。"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5e2bScpnkVbv","executionInfo":{"status":"ok","timestamp":1623345984107,"user_tz":-480,"elapsed":8400,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"b01ae71a-2c2e-43d9-c28f-69723e4d4c26"},"source":["!apt update\n","!apt install python-opengl xvfb -y\n","!pip install gym[box2d]==0.18.3 pyvirtualdisplay tqdm numpy==1.19.5 torch==1.8.1"],"execution_count":263,"outputs":[{"output_type":"stream","text":["Hit:1 https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/ InRelease\n","Ign:2 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  InRelease\n","Ign:3 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  InRelease\n","Hit:4 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Release\n","Hit:5 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Release\n","Hit:6 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic InRelease\n","Get:7 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]\n","Hit:9 http://archive.ubuntu.com/ubuntu bionic InRelease\n","Get:11 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]\n","Hit:12 http://ppa.launchpad.net/cran/libgit2/ubuntu bionic InRelease\n","Hit:13 http://ppa.launchpad.net/deadsnakes/ppa/ubuntu bionic InRelease\n","Get:14 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]\n","Hit:15 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu bionic InRelease\n","Fetched 252 kB in 2s (114 kB/s)\n","Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","48 packages can be upgraded. Run 'apt list --upgradable' to see them.\n","Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","python-opengl is already the newest version (3.1.0+dfsg-1).\n","xvfb is already the newest version (2:1.19.6-1ubuntu4.9).\n","0 upgraded, 0 newly installed, 0 to remove and 48 not upgraded.\n","Requirement already satisfied: gym[box2d]==0.18.3 in /usr/local/lib/python3.7/dist-packages (0.18.3)\n","Requirement already satisfied: pyvirtualdisplay in /usr/local/lib/python3.7/dist-packages (2.2)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (4.41.1)\n","Requirement already satisfied: numpy==1.19.5 in /usr/local/lib/python3.7/dist-packages (1.19.5)\n","Requirement already satisfied: torch==1.8.1 in /usr/local/lib/python3.7/dist-packages (1.8.1+cu101)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from gym[box2d]==0.18.3) (1.4.1)\n","Requirement already satisfied: pyglet<=1.5.15,>=1.4.0 in /usr/local/lib/python3.7/dist-packages (from gym[box2d]==0.18.3) (1.5.0)\n","Requirement already satisfied: cloudpickle<1.7.0,>=1.2.0 in /usr/local/lib/python3.7/dist-packages (from gym[box2d]==0.18.3) (1.3.0)\n","Requirement already satisfied: Pillow<=8.2.0 in /usr/local/lib/python3.7/dist-packages (from gym[box2d]==0.18.3) (7.1.2)\n","Requirement already satisfied: box2d-py~=2.3.5; extra == \"box2d\" in /usr/local/lib/python3.7/dist-packages (from gym[box2d]==0.18.3) (2.3.8)\n","Requirement already satisfied: EasyProcess in /usr/local/lib/python3.7/dist-packages (from pyvirtualdisplay) (0.3)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch==1.8.1) (3.7.4.3)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from pyglet<=1.5.15,>=1.4.0->gym[box2d]==0.18.3) (0.16.0)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"M_-i3cdoYsks"},"source":["接下來，設置好 virtual display，並引入所有必要的套件。"]},{"cell_type":"code","metadata":{"id":"nl2nREINDLiw","executionInfo":{"status":"ok","timestamp":1623345984108,"user_tz":-480,"elapsed":19,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["%%capture\n","from pyvirtualdisplay import Display\n","virtual_display = Display(visible=0, size=(1400, 900))\n","virtual_display.start()\n","\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","\n","from IPython import display\n","\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","from torch.distributions import Categorical\n","from tqdm.notebook import tqdm"],"execution_count":264,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HVu9-Vdrl4E3"},"source":["# 請不要更改 random seed !!!!\n","# 不然在judgeboi上 你的成績不會被reproduce !!!!"]},{"cell_type":"code","metadata":{"id":"fV9i8i2YkRbO","executionInfo":{"status":"ok","timestamp":1623345984110,"user_tz":-480,"elapsed":18,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["seed = 543 # Do not change this\n","def fix(env, seed):\n","  env.seed(seed)\n","  env.action_space.seed(seed)\n","  torch.manual_seed(seed)\n","  torch.cuda.manual_seed(seed)\n","  torch.cuda.manual_seed_all(seed)\n","  np.random.seed(seed)\n","  random.seed(seed)\n","  torch.set_deterministic(True)\n","  torch.backends.cudnn.benchmark = False\n","  torch.backends.cudnn.deterministic = True"],"execution_count":265,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"He0XDx6bzjgC"},"source":["最後，引入 OpenAI 的 gym，並建立一個 [Lunar Lander](https://gym.openai.com/envs/LunarLander-v2/) 環境。"]},{"cell_type":"code","metadata":{"id":"N_4-xJcbBt09","executionInfo":{"status":"ok","timestamp":1623345984110,"user_tz":-480,"elapsed":17,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["%%capture\n","import gym\n","import random\n","import numpy as np\n","\n","env = gym.make('LunarLander-v2')\n","\n","fix(env, seed)"],"execution_count":266,"outputs":[]},{"cell_type":"code","metadata":{"id":"NmiAOfqRwRX5","executionInfo":{"status":"ok","timestamp":1623345984111,"user_tz":-480,"elapsed":17,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["import time\n","start = time.time()"],"execution_count":267,"outputs":[]},{"cell_type":"code","metadata":{"id":"LcMjEUWTBEEB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623345985259,"user_tz":-480,"elapsed":1165,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"61fa8728-2519-4cb1-9892-7dbe9cdfab5b"},"source":["!pip freeze"],"execution_count":268,"outputs":[{"output_type":"stream","text":["absl-py==0.12.0\n","alabaster==0.7.12\n","albumentations==0.1.12\n","altair==4.1.0\n","appdirs==1.4.4\n","argon2-cffi==20.1.0\n","arviz==0.11.2\n","astor==0.8.1\n","astropy==4.2.1\n","astunparse==1.6.3\n","async-generator==1.10\n","atari-py==0.2.9\n","atomicwrites==1.4.0\n","attrs==21.2.0\n","audioread==2.1.9\n","autograd==1.3\n","Babel==2.9.1\n","backcall==0.2.0\n","beautifulsoup4==4.6.3\n","bleach==3.3.0\n","blis==0.4.1\n","bokeh==2.3.2\n","Bottleneck==1.3.2\n","box2d-py==2.3.8\n","branca==0.4.2\n","bs4==0.0.1\n","CacheControl==0.12.6\n","cached-property==1.5.2\n","cachetools==4.2.2\n","catalogue==1.0.0\n","certifi==2020.12.5\n","cffi==1.14.5\n","cftime==1.5.0\n","chainer==7.4.0\n","chardet==3.0.4\n","click==7.1.2\n","cloudpickle==1.3.0\n","cmake==3.12.0\n","cmdstanpy==0.9.5\n","colorcet==2.0.6\n","colorlover==0.3.0\n","community==1.0.0b1\n","contextlib2==0.5.5\n","convertdate==2.3.2\n","coverage==3.7.1\n","coveralls==0.5\n","crcmod==1.7\n","cufflinks==0.17.3\n","cupy-cuda101==7.4.0\n","cvxopt==1.2.6\n","cvxpy==1.0.31\n","cycler==0.10.0\n","cymem==2.0.5\n","Cython==0.29.23\n","daft==0.0.4\n","dask==2.12.0\n","datascience==0.10.6\n","debugpy==1.0.0\n","decorator==4.4.2\n","defusedxml==0.7.1\n","descartes==1.1.0\n","dill==0.3.3\n","distributed==1.25.3\n","dlib==19.18.0\n","dm-tree==0.1.6\n","docopt==0.6.2\n","docutils==0.17.1\n","dopamine-rl==1.0.5\n","earthengine-api==0.1.266\n","easydict==1.9\n","EasyProcess==0.3\n","ecos==2.0.7.post1\n","editdistance==0.5.3\n","en-core-web-sm==2.2.5\n","entrypoints==0.3\n","ephem==3.7.7.1\n","et-xmlfile==1.1.0\n","fa2==0.3.5\n","fastai==1.0.61\n","fastdtw==0.3.4\n","fastprogress==1.0.0\n","fastrlock==0.6\n","fbprophet==0.7.1\n","feather-format==0.4.1\n","filelock==3.0.12\n","firebase-admin==4.4.0\n","fix-yahoo-finance==0.0.22\n","Flask==1.1.4\n","flatbuffers==1.12\n","folium==0.8.3\n","future==0.16.0\n","gast==0.4.0\n","GDAL==2.2.2\n","gdown==3.6.4\n","gensim==3.6.0\n","geographiclib==1.50\n","geopy==1.17.0\n","gin-config==0.4.0\n","glob2==0.7\n","google==2.0.3\n","google-api-core==1.26.3\n","google-api-python-client==1.12.8\n","google-auth==1.30.0\n","google-auth-httplib2==0.0.4\n","google-auth-oauthlib==0.4.4\n","google-cloud-bigquery==1.21.0\n","google-cloud-bigquery-storage==1.1.0\n","google-cloud-core==1.0.3\n","google-cloud-datastore==1.8.0\n","google-cloud-firestore==1.7.0\n","google-cloud-language==1.2.0\n","google-cloud-storage==1.18.1\n","google-cloud-translate==1.5.0\n","google-colab==1.0.0\n","google-pasta==0.2.0\n","google-resumable-media==0.4.1\n","googleapis-common-protos==1.53.0\n","googledrivedownloader==0.4\n","graphviz==0.10.1\n","greenlet==1.1.0\n","grpcio==1.34.1\n","gspread==3.0.1\n","gspread-dataframe==3.0.8\n","gym==0.18.3\n","h5py==3.1.0\n","HeapDict==1.0.1\n","hijri-converter==2.1.1\n","holidays==0.10.5.2\n","holoviews==1.14.3\n","html5lib==1.0.1\n","httpimport==0.5.18\n","httplib2==0.17.4\n","httplib2shim==0.0.3\n","humanize==0.5.1\n","hyperopt==0.1.2\n","ideep4py==2.0.0.post3\n","idna==2.10\n","imageio==2.4.1\n","imagesize==1.2.0\n","imbalanced-learn==0.4.3\n","imblearn==0.0\n","imgaug==0.2.9\n","importlib-metadata==4.0.1\n","importlib-resources==5.1.3\n","imutils==0.5.4\n","inflect==2.1.0\n","iniconfig==1.1.1\n","install==1.3.4\n","intel-openmp==2021.2.0\n","intervaltree==2.1.0\n","ipykernel==4.10.1\n","ipython==5.5.0\n","ipython-genutils==0.2.0\n","ipython-sql==0.3.9\n","ipywidgets==7.6.3\n","itsdangerous==1.1.0\n","jax==0.2.13\n","jaxlib==0.1.66+cuda110\n","jdcal==1.4.1\n","jedi==0.18.0\n","jieba==0.42.1\n","Jinja2==2.11.3\n","joblib==1.0.1\n","jpeg4py==0.1.4\n","jsonschema==2.6.0\n","jupyter==1.0.0\n","jupyter-client==5.3.5\n","jupyter-console==5.2.0\n","jupyter-core==4.7.1\n","jupyterlab-pygments==0.1.2\n","jupyterlab-widgets==1.0.0\n","kaggle==1.5.12\n","kapre==0.3.5\n","Keras==2.4.3\n","keras-nightly==2.5.0.dev2021032900\n","Keras-Preprocessing==1.1.2\n","keras-vis==0.4.1\n","kiwisolver==1.3.1\n","korean-lunar-calendar==0.2.1\n","librosa==0.8.0\n","lightgbm==2.2.3\n","llvmlite==0.34.0\n","lmdb==0.99\n","LunarCalendar==0.0.9\n","lxml==4.2.6\n","Markdown==3.3.4\n","MarkupSafe==2.0.1\n","matplotlib==3.2.2\n","matplotlib-inline==0.1.2\n","matplotlib-venn==0.11.6\n","missingno==0.4.2\n","mistune==0.8.4\n","mizani==0.6.0\n","mkl==2019.0\n","mlxtend==0.14.0\n","more-itertools==8.7.0\n","moviepy==0.2.3.5\n","mpmath==1.2.1\n","msgpack==1.0.2\n","multiprocess==0.70.11.1\n","multitasking==0.0.9\n","murmurhash==1.0.5\n","music21==5.5.0\n","natsort==5.5.0\n","nbclient==0.5.3\n","nbconvert==5.6.1\n","nbformat==5.1.3\n","nest-asyncio==1.5.1\n","netCDF4==1.5.6\n","networkx==2.5.1\n","nibabel==3.0.2\n","nltk==3.2.5\n","notebook==5.3.1\n","numba==0.51.2\n","numexpr==2.7.3\n","numpy==1.19.5\n","nvidia-ml-py3==7.352.0\n","oauth2client==4.1.3\n","oauthlib==3.1.0\n","okgrade==0.4.3\n","opencv-contrib-python==4.1.2.30\n","opencv-python==4.1.2.30\n","openpyxl==2.5.9\n","opt-einsum==3.3.0\n","osqp==0.6.2.post0\n","packaging==20.9\n","palettable==3.3.0\n","pandas==1.1.5\n","pandas-datareader==0.9.0\n","pandas-gbq==0.13.3\n","pandas-profiling==1.4.1\n","pandocfilters==1.4.3\n","panel==0.11.3\n","param==1.10.1\n","parso==0.8.2\n","pathlib==1.0.1\n","patsy==0.5.1\n","pexpect==4.8.0\n","pickleshare==0.7.5\n","Pillow==7.1.2\n","pip-tools==4.5.1\n","plac==1.1.3\n","plotly==4.4.1\n","plotnine==0.6.0\n","pluggy==0.7.1\n","pooch==1.3.0\n","portpicker==1.3.9\n","prefetch-generator==1.0.1\n","preshed==3.0.5\n","prettytable==2.1.0\n","progressbar2==3.38.0\n","prometheus-client==0.10.1\n","promise==2.3\n","prompt-toolkit==1.0.18\n","protobuf==3.12.4\n","psutil==5.4.8\n","psycopg2==2.7.6.1\n","ptyprocess==0.7.0\n","py==1.10.0\n","pyarrow==3.0.0\n","pyasn1==0.4.8\n","pyasn1-modules==0.2.8\n","pycocotools==2.0.2\n","pycparser==2.20\n","pyct==0.4.8\n","pydata-google-auth==1.2.0\n","pydot==1.3.0\n","pydot-ng==2.0.0\n","pydotplus==2.0.2\n","PyDrive==1.3.1\n","pyemd==0.5.1\n","pyerfa==2.0.0\n","pyglet==1.5.0\n","Pygments==2.6.1\n","pygobject==3.26.1\n","pymc3==3.11.2\n","PyMeeus==0.5.11\n","pymongo==3.11.4\n","pymystem3==0.2.0\n","PyOpenGL==3.1.5\n","pyparsing==2.4.7\n","pyrsistent==0.17.3\n","pysndfile==1.3.8\n","PySocks==1.7.1\n","pystan==2.19.1.1\n","pytest==3.6.4\n","python-apt==0.0.0\n","python-chess==0.23.11\n","python-dateutil==2.8.1\n","python-louvain==0.15\n","python-slugify==5.0.2\n","python-utils==2.5.6\n","pytz==2018.9\n","PyVirtualDisplay==2.2\n","pyviz-comms==2.0.1\n","PyWavelets==1.1.1\n","PyYAML==3.13\n","pyzmq==22.0.3\n","qdldl==0.1.5.post0\n","qtconsole==5.1.0\n","QtPy==1.9.0\n","regex==2019.12.20\n","requests==2.23.0\n","requests-oauthlib==1.3.0\n","resampy==0.2.2\n","retrying==1.3.3\n","rpy2==3.4.4\n","rsa==4.7.2\n","scikit-image==0.16.2\n","scikit-learn==0.22.2.post1\n","scipy==1.4.1\n","screen-resolution-extra==0.0.0\n","scs==2.1.3\n","seaborn==0.11.1\n","semver==2.13.0\n","Send2Trash==1.5.0\n","setuptools-git==1.2\n","Shapely==1.7.1\n","simplegeneric==0.8.1\n","six==1.15.0\n","sklearn==0.0\n","sklearn-pandas==1.8.0\n","smart-open==5.0.0\n","snowballstemmer==2.1.0\n","sortedcontainers==2.4.0\n","SoundFile==0.10.3.post1\n","spacy==2.2.4\n","Sphinx==1.8.5\n","sphinxcontrib-serializinghtml==1.1.4\n","sphinxcontrib-websupport==1.2.4\n","SQLAlchemy==1.4.15\n","sqlparse==0.4.1\n","srsly==1.0.5\n","statsmodels==0.10.2\n","sympy==1.7.1\n","tables==3.4.4\n","tabulate==0.8.9\n","tblib==1.7.0\n","tensorboard==2.5.0\n","tensorboard-data-server==0.6.1\n","tensorboard-plugin-wit==1.8.0\n","tensorflow==2.5.0\n","tensorflow-datasets==4.0.1\n","tensorflow-estimator==2.5.0\n","tensorflow-gcs-config==2.5.0\n","tensorflow-hub==0.12.0\n","tensorflow-metadata==1.0.0\n","tensorflow-probability==0.12.1\n","termcolor==1.1.0\n","terminado==0.10.0\n","testpath==0.5.0\n","text-unidecode==1.3\n","textblob==0.15.3\n","Theano-PyMC==1.1.2\n","thinc==7.4.0\n","tifffile==2021.4.8\n","toml==0.10.2\n","toolz==0.11.1\n","torch==1.8.1+cu101\n","torchsummary==1.5.1\n","torchtext==0.9.1\n","torchvision==0.9.1+cu101\n","tornado==5.1.1\n","tqdm==4.41.1\n","traitlets==5.0.5\n","tweepy==3.10.0\n","typeguard==2.7.1\n","typing-extensions==3.7.4.3\n","tzlocal==1.5.1\n","uritemplate==3.0.1\n","urllib3==1.24.3\n","vega-datasets==0.9.0\n","wasabi==0.8.2\n","wcwidth==0.2.5\n","webencodings==0.5.1\n","Werkzeug==1.0.1\n","widgetsnbextension==3.5.1\n","wordcloud==1.5.0\n","wrapt==1.12.1\n","xarray==0.18.2\n","xgboost==0.90\n","xkit==0.0.0\n","xlrd==1.1.0\n","xlwt==1.3.0\n","yellowbrick==0.9.1\n","zict==2.0.0\n","zipp==3.4.1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NrkVvTrvWZ5H"},"source":["## 什麼是 Lunar Lander？\n","\n","“LunarLander-v2” 這個環境是在模擬登月小艇降落在月球表面時的情形。\n","這個任務的目標是讓登月小艇「安全地」降落在兩個黃色旗幟間的平地上。\n","> Landing pad is always at coordinates (0,0).\n","> Coordinates are the first two numbers in state vector.\n","\n","![](https://gym.openai.com/assets/docs/aeloop-138c89d44114492fd02822303e6b4b07213010bb14ca5856d2d49d6b62d88e53.svg)\n","\n","所謂的「環境」其實同時包括了 agent 和 environment。\n","我們利用 `step()` 這個函式讓 agent 行動，而後函式便會回傳 environment 給予的 observation/state（以下這兩個名詞代表同樣的意思）和 reward。"]},{"cell_type":"markdown","metadata":{"id":"bIbp82sljvAt"},"source":["### Observation / State\n","\n","首先，我們可以看看 environment 回傳給 agent 的 observation 究竟是長什麼樣子的資料："]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rsXZra3N9R5T","executionInfo":{"status":"ok","timestamp":1623345985264,"user_tz":-480,"elapsed":41,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"f240f818-060c-417a-a599-e1653a1dace3"},"source":["print(env.observation_space)"],"execution_count":269,"outputs":[{"output_type":"stream","text":["Box(-inf, inf, (8,), float32)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ezdfoThbAQ49"},"source":["`Box(8,)` 說明我們會拿到 8 維的向量作為 observation，其中包含：垂直及水平座標、速度、角度、加速度等等，這部分我們就不細說。\n","\n","### Action\n","\n","而在 agent 得到 observation 和 reward 以後，能夠採取的動作有："]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p1k4dIrBAaKi","executionInfo":{"status":"ok","timestamp":1623345985265,"user_tz":-480,"elapsed":32,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"fb6222a5-186c-42ee-c511-4c3ec719f251"},"source":["print(env.action_space)"],"execution_count":270,"outputs":[{"output_type":"stream","text":["Discrete(4)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dejXT6PHBrPn"},"source":["`Discrete(4)` 說明 agent 可以採取四種離散的行動：\n","- 0 代表不採取任何行動\n","- 2 代表主引擎向下噴射\n","- 1, 3 則是向左右噴射\n","\n","接下來，我們嘗試讓 agent 與 environment 互動。\n","在進行任何操作前，建議先呼叫 `reset()` 函式讓整個「環境」重置。\n","而這個函式同時會回傳「環境」最初始的狀態。"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pi4OmrmZgnWA","executionInfo":{"status":"ok","timestamp":1623345985265,"user_tz":-480,"elapsed":27,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"6072e3cb-b55b-4f9f-8288-268d696e0e14"},"source":["initial_state = env.reset()\n","print(initial_state)"],"execution_count":271,"outputs":[{"output_type":"stream","text":["[ 0.00396109  1.4083536   0.40119505 -0.11407257 -0.00458307 -0.09087662\n","  0.          0.        ]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"uBx0mEqqgxJ9"},"source":["接著，我們試著從 agent 的四種行動空間中，隨機採取一個行動"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vxkOEXRKgizt","executionInfo":{"status":"ok","timestamp":1623345985266,"user_tz":-480,"elapsed":25,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"c6e877ae-b6fc-4cb7-ce6d-b669b3f298d7"},"source":["random_action = env.action_space.sample()\n","print(random_action)"],"execution_count":272,"outputs":[{"output_type":"stream","text":["0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mns-bO01g0-J"},"source":["再利用 `step()` 函式讓 agent 根據我們隨機抽樣出來的 `random_action` 動作。\n","而這個函式會回傳四項資訊：\n","- observation / state\n","- reward\n","- 完成與否\n","- 其餘資訊"]},{"cell_type":"code","metadata":{"id":"E_WViSxGgIk9","executionInfo":{"status":"ok","timestamp":1623345985266,"user_tz":-480,"elapsed":21,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["observation, reward, done, info = env.step(random_action)"],"execution_count":273,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FdieGq7NuBIm"},"source":["第一項資訊 `observation` 即為 agent 採取行動之後，agent 對於環境的 observation 或者說環境的 state 為何。\n","而第三項資訊 `done` 則是 `True` 或 `False` 的布林值，當登月小艇成功著陸或是不幸墜毀時，代表這個回合（episode）也就跟著結束了，此時 `step()` 函式便會回傳 `done = True`，而在那之前，`done` 則保持 `False`。"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yK7r126kuCNp","executionInfo":{"status":"ok","timestamp":1623345985267,"user_tz":-480,"elapsed":21,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"08f0c8aa-2556-4f62-d5ff-014824541f6d"},"source":["print(done)"],"execution_count":274,"outputs":[{"output_type":"stream","text":["False\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"GKdS8vOihxhc"},"source":["### Reward\n","\n","而「環境」給予的 reward 大致是這樣計算：\n","- 小艇墜毀得到 -100 分\n","- 小艇在黃旗幟之間成功著地則得 100~140 分\n","- 噴射主引擎（向下噴火）每次 -0.3 分\n","- 小艇最終完全靜止則再得 100 分\n","- 小艇每隻腳碰觸地面 +10 分\n","\n","> Reward for moving from the top of the screen to landing pad and zero speed is about 100..140 points.\n","> If lander moves away from landing pad it loses reward back.\n","> Episode finishes if the lander crashes or comes to rest, receiving additional -100 or +100 points.\n","> Each leg ground contact is +10.\n","> Firing main engine is -0.3 points each frame.\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vxQNs77hi0_7","executionInfo":{"status":"ok","timestamp":1623345985267,"user_tz":-480,"elapsed":18,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"8c26246c-9c99-4856-b191-07deef852bed"},"source":["print(reward) # after doing a random action (0), the immediate reward is stored in this "],"execution_count":275,"outputs":[{"output_type":"stream","text":["-0.8588900517154912\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Mhqp6D-XgHpe"},"source":["### Random Agent\n","\n","最後，在進入實做之前，我們就來看看這樣一個 random agent 能否成功登陸月球："]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":269},"id":"Y3G0bxoccelv","executionInfo":{"status":"ok","timestamp":1623345997833,"user_tz":-480,"elapsed":12581,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"0eb57650-5ea7-41ba-d7f2-6b049ccb954f"},"source":["\n","env.reset()\n","\n","img = plt.imshow(env.render(mode='rgb_array'))\n","\n","done = False\n","while not done:\n","    action = env.action_space.sample()\n","    observation, reward, done, _ = env.step(action)\n","\n","    img.set_data(env.render(mode='rgb_array'))\n","    display.display(plt.gcf())\n","    display.clear_output(wait=True)"],"execution_count":276,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"F5paWqo7tWL2"},"source":["## Policy Gradient\n","\n","現在來搭建一個簡單的 policy network。\n","我們預設模型的輸入是 8-dim 的 observation，輸出則是離散的四個動作之一："]},{"cell_type":"code","metadata":{"id":"J8tdmeD-tZew","executionInfo":{"status":"ok","timestamp":1623345997834,"user_tz":-480,"elapsed":17,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["class PolicyGradientNetwork(nn.Module):\n","\n","    def __init__(self):\n","        super().__init__()\n","        self.fc1 = nn.Linear(8, 16)\n","        self.fc2 = nn.Linear(16, 16)\n","        self.fc3 = nn.Linear(16, 4) # output dim = 4\n","\n","    def forward(self, state):\n","        hid = torch.tanh(self.fc1(state))\n","        hid = torch.tanh(self.fc2(hid))\n","        return F.softmax(self.fc3(hid), dim=-1) # 4個action的幾率分佈"],"execution_count":277,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ynbqJrhIFTC3"},"source":["再來，搭建一個簡單的 agent，並搭配上方的 policy network 來採取行動。\n","這個 agent 能做到以下幾件事：\n","- `learn()`：從記下來的 log probabilities 及 rewards 來更新 policy network。\n","- `sample()`：從 environment 得到 observation 之後，利用 policy network 得出應該採取的行動。\n","而此函式除了回傳抽樣出來的 action，也會回傳此次抽樣的 log probabilities。"]},{"cell_type":"code","metadata":{"id":"zZo-IxJx286z","executionInfo":{"status":"ok","timestamp":1623345997835,"user_tz":-480,"elapsed":17,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["\n","class PolicyGradientAgent():\n","    \n","    def __init__(self, network):\n","        self.network = network\n","        self.optimizer = optim.SGD(self.network.parameters(), lr=0.001)\n","         \n","    def forward(self, state):\n","        return self.network(state)\n","    def learn(self, log_probs, rewards):\n","        loss = (-log_probs * rewards).sum() # You don't need to revise this to pass simple baseline (but you can)\n","\n","        self.optimizer.zero_grad()\n","        loss.backward()\n","        self.optimizer.step()\n","        \n","    def sample(self, state):\n","        action_prob = self.network(torch.FloatTensor(state))\n","        action_dist = Categorical(action_prob)\n","        action = action_dist.sample()\n","        log_prob = action_dist.log_prob(action)\n","        return action.item(), log_prob\n","\n","    def save(self, PATH): # You should not revise this\n","        Agent_Dict = {\n","            \"network\" : self.network.state_dict(),\n","            \"optimizer\" : self.optimizer.state_dict()\n","        }\n","        torch.save(Agent_Dict, PATH)\n","\n","    def load(self, PATH): # You should not revise this\n","        checkpoint = torch.load(PATH)\n","        self.network.load_state_dict(checkpoint[\"network\"])\n","        #如果要儲存過程或是中斷訓練後想繼續可以用喔 ^_^\n","        self.optimizer.load_state_dict(checkpoint[\"optimizer\"])\n"],"execution_count":278,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ehPlnTKyRZf9"},"source":["最後，建立一個 network 和 agent，就可以開始進行訓練了。"]},{"cell_type":"code","metadata":{"id":"GfJIvML-RYjL","executionInfo":{"status":"ok","timestamp":1623345997835,"user_tz":-480,"elapsed":16,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["network = PolicyGradientNetwork()\n","agent = PolicyGradientAgent(network)\n","#agent = PolicyGradientAgent()"],"execution_count":279,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ouv23glgf5Qt"},"source":["## 訓練 Agent\n","\n","現在我們開始訓練 agent。\n","透過讓 agent 和 environment 互動，我們記住每一組對應的 log probabilities 及 reward，並在成功登陸或者不幸墜毀後，回放這些「記憶」來訓練 policy network。"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["ee93c9a95f5c49168df8c3149fae0a1b","432705b7d1b94c2e9c1af650fdbb61f5","134d67b6c3a34af09af7f30a65b2c7aa","72e0cd17ffcf45f48728c5afb6fb27ec","f93ec91ec6b147ebb4f3088d65d02159","f1d335565f574d2b9999242c80e017a2","32dd67272a904e2ba7d7bae9caed0e32","90e9a3b0f5ca42d0af9306233ef17e01"]},"id":"vg5rxBBaf38_","executionInfo":{"status":"ok","timestamp":1623347343645,"user_tz":-480,"elapsed":1345826,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"e8c8ab9a-7fc2-4f4c-ee05-b0d509ebaaca"},"source":["def calculator(list, rate):\n","  ans= []\n","  for i in range(len(list)):\n","    f = 0\n","    num = 0\n","    for t in range(len(list)):\n","      if t >= i:\n","        f += (list[i+num])*(rate**(t-i))\n","        num += 1\n","    ans.append(f)\n","  return ans\n","\n","agent.network.train()  # 訓練前，先確保 network 處在 training 模式\n","EPISODE_PER_BATCH = 5  # 每蒐集 5 個 episodes 更新一次 agent\n","NUM_BATCH = 500        # tip_3 調大一點\n","\n","avg_total_rewards, avg_final_rewards = [], []\n","\n","prg_bar = tqdm(range(NUM_BATCH))\n","for batch in prg_bar:\n","\n","    log_probs, rewards = [], []\n","    total_rewards, final_rewards = [], []\n","\n","    # 蒐集訓練資料\n","    for episode in range(EPISODE_PER_BATCH):\n","        \n","        state = env.reset()\n","        total_reward, total_step = 0, 0\n","        seq_rw = []\n","        while True:\n","\n","            action, log_prob = agent.sample(state) # at , log(at|st)\n","            next_state, reward, done, _ = env.step(action)\n","\n","            log_probs.append(log_prob) # [log(a1|s1), log(a2|s2), ...., log(at|st)]\n","            state = next_state\n","            seq_rw.append(reward)\n","            # total_reward += reward\n","            total_step += 1\n","            # rewards.append(reward) #改這裡\n","            # medium：將reward調整成accumulative decaying reward, 給定action_list : a1,                         a2,                           a3 ......\n","            #                                                       reward :     r1+0.99*r2+0.99^2*r3+......, r2+0.99*r3+0.99^2*r4+...... ,r3+0.99*r4+0.99^2*r5+ ......\n","            if done:\n","                a = calculator(seq_rw.copy(), 0.95) ## tip2_ 調0.98:22， 0.97:17, 0.99:15.9\n","                total_reward = np.sum(a) ## 這可能錯\n","                rewards.extend(a)\n","\n","                final_rewards.append(reward)\n","                total_rewards.append(total_reward)\n","                break\n","\n","    print(f\"rewards looks like \", np.shape(rewards))  \n","    print(f\"log_probs looks like \", np.shape(log_probs))     \n","    # 紀錄訓練過程\n","    avg_total_reward = sum(total_rewards) / len(total_rewards)\n","    avg_final_reward = sum(final_rewards) / len(final_rewards)\n","    avg_total_rewards.append(avg_total_reward)\n","    avg_final_rewards.append(avg_final_reward)\n","    prg_bar.set_description(f\"Total: {avg_total_reward: 4.1f}, Final: {avg_final_reward: 4.1f}\")\n","\n","    # 更新網路\n","    # rewards = np.concatenate(rewards, axis=0) ## ?\n","    rewards = (rewards - np.mean(rewards)) / (np.std(rewards) + 1e-9)  # tip_1 將 reward 正規標準化\n","    agent.learn(torch.stack(log_probs), torch.from_numpy(rewards))\n","    print(\"logs prob looks like \", torch.stack(log_probs).size())\n","    print(\"torch.from_numpy(rewards) looks like \", torch.from_numpy(rewards).size())"],"execution_count":280,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"ee93c9a95f5c49168df8c3149fae0a1b","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=500.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["rewards looks like  (448,)\n","log_probs looks like  (448,)\n","logs prob looks like  torch.Size([448])\n","torch.from_numpy(rewards) looks like  torch.Size([448])\n","rewards looks like  (485,)\n","log_probs looks like  (485,)\n","logs prob looks like  torch.Size([485])\n","torch.from_numpy(rewards) looks like  torch.Size([485])\n","rewards looks like  (531,)\n","log_probs looks like  (531,)\n","logs prob looks like  torch.Size([531])\n","torch.from_numpy(rewards) looks like  torch.Size([531])\n","rewards looks like  (484,)\n","log_probs looks like  (484,)\n","logs prob looks like  torch.Size([484])\n","torch.from_numpy(rewards) looks like  torch.Size([484])\n","rewards looks like  (528,)\n","log_probs looks like  (528,)\n","logs prob looks like  torch.Size([528])\n","torch.from_numpy(rewards) looks like  torch.Size([528])\n","rewards looks like  (486,)\n","log_probs looks like  (486,)\n","logs prob looks like  torch.Size([486])\n","torch.from_numpy(rewards) looks like  torch.Size([486])\n","rewards looks like  (500,)\n","log_probs looks like  (500,)\n","logs prob looks like  torch.Size([500])\n","torch.from_numpy(rewards) looks like  torch.Size([500])\n","rewards looks like  (388,)\n","log_probs looks like  (388,)\n","logs prob looks like  torch.Size([388])\n","torch.from_numpy(rewards) looks like  torch.Size([388])\n","rewards looks like  (376,)\n","log_probs looks like  (376,)\n","logs prob looks like  torch.Size([376])\n","torch.from_numpy(rewards) looks like  torch.Size([376])\n","rewards looks like  (1381,)\n","log_probs looks like  (1381,)\n","logs prob looks like  torch.Size([1381])\n","torch.from_numpy(rewards) looks like  torch.Size([1381])\n","rewards looks like  (471,)\n","log_probs looks like  (471,)\n","logs prob looks like  torch.Size([471])\n","torch.from_numpy(rewards) looks like  torch.Size([471])\n","rewards looks like  (482,)\n","log_probs looks like  (482,)\n","logs prob looks like  torch.Size([482])\n","torch.from_numpy(rewards) looks like  torch.Size([482])\n","rewards looks like  (521,)\n","log_probs looks like  (521,)\n","logs prob looks like  torch.Size([521])\n","torch.from_numpy(rewards) looks like  torch.Size([521])\n","rewards looks like  (546,)\n","log_probs looks like  (546,)\n","logs prob looks like  torch.Size([546])\n","torch.from_numpy(rewards) looks like  torch.Size([546])\n","rewards looks like  (416,)\n","log_probs looks like  (416,)\n","logs prob looks like  torch.Size([416])\n","torch.from_numpy(rewards) looks like  torch.Size([416])\n","rewards looks like  (656,)\n","log_probs looks like  (656,)\n","logs prob looks like  torch.Size([656])\n","torch.from_numpy(rewards) looks like  torch.Size([656])\n","rewards looks like  (562,)\n","log_probs looks like  (562,)\n","logs prob looks like  torch.Size([562])\n","torch.from_numpy(rewards) looks like  torch.Size([562])\n","rewards looks like  (476,)\n","log_probs looks like  (476,)\n","logs prob looks like  torch.Size([476])\n","torch.from_numpy(rewards) looks like  torch.Size([476])\n","rewards looks like  (466,)\n","log_probs looks like  (466,)\n","logs prob looks like  torch.Size([466])\n","torch.from_numpy(rewards) looks like  torch.Size([466])\n","rewards looks like  (473,)\n","log_probs looks like  (473,)\n","logs prob looks like  torch.Size([473])\n","torch.from_numpy(rewards) looks like  torch.Size([473])\n","rewards looks like  (488,)\n","log_probs looks like  (488,)\n","logs prob looks like  torch.Size([488])\n","torch.from_numpy(rewards) looks like  torch.Size([488])\n","rewards looks like  (609,)\n","log_probs looks like  (609,)\n","logs prob looks like  torch.Size([609])\n","torch.from_numpy(rewards) looks like  torch.Size([609])\n","rewards looks like  (464,)\n","log_probs looks like  (464,)\n","logs prob looks like  torch.Size([464])\n","torch.from_numpy(rewards) looks like  torch.Size([464])\n","rewards looks like  (630,)\n","log_probs looks like  (630,)\n","logs prob looks like  torch.Size([630])\n","torch.from_numpy(rewards) looks like  torch.Size([630])\n","rewards looks like  (461,)\n","log_probs looks like  (461,)\n","logs prob looks like  torch.Size([461])\n","torch.from_numpy(rewards) looks like  torch.Size([461])\n","rewards looks like  (440,)\n","log_probs looks like  (440,)\n","logs prob looks like  torch.Size([440])\n","torch.from_numpy(rewards) looks like  torch.Size([440])\n","rewards looks like  (452,)\n","log_probs looks like  (452,)\n","logs prob looks like  torch.Size([452])\n","torch.from_numpy(rewards) looks like  torch.Size([452])\n","rewards looks like  (442,)\n","log_probs looks like  (442,)\n","logs prob looks like  torch.Size([442])\n","torch.from_numpy(rewards) looks like  torch.Size([442])\n","rewards looks like  (553,)\n","log_probs looks like  (553,)\n","logs prob looks like  torch.Size([553])\n","torch.from_numpy(rewards) looks like  torch.Size([553])\n","rewards looks like  (531,)\n","log_probs looks like  (531,)\n","logs prob looks like  torch.Size([531])\n","torch.from_numpy(rewards) looks like  torch.Size([531])\n","rewards looks like  (491,)\n","log_probs looks like  (491,)\n","logs prob looks like  torch.Size([491])\n","torch.from_numpy(rewards) looks like  torch.Size([491])\n","rewards looks like  (452,)\n","log_probs looks like  (452,)\n","logs prob looks like  torch.Size([452])\n","torch.from_numpy(rewards) looks like  torch.Size([452])\n","rewards looks like  (464,)\n","log_probs looks like  (464,)\n","logs prob looks like  torch.Size([464])\n","torch.from_numpy(rewards) looks like  torch.Size([464])\n","rewards looks like  (451,)\n","log_probs looks like  (451,)\n","logs prob looks like  torch.Size([451])\n","torch.from_numpy(rewards) looks like  torch.Size([451])\n","rewards looks like  (522,)\n","log_probs looks like  (522,)\n","logs prob looks like  torch.Size([522])\n","torch.from_numpy(rewards) looks like  torch.Size([522])\n","rewards looks like  (494,)\n","log_probs looks like  (494,)\n","logs prob looks like  torch.Size([494])\n","torch.from_numpy(rewards) looks like  torch.Size([494])\n","rewards looks like  (496,)\n","log_probs looks like  (496,)\n","logs prob looks like  torch.Size([496])\n","torch.from_numpy(rewards) looks like  torch.Size([496])\n","rewards looks like  (367,)\n","log_probs looks like  (367,)\n","logs prob looks like  torch.Size([367])\n","torch.from_numpy(rewards) looks like  torch.Size([367])\n","rewards looks like  (573,)\n","log_probs looks like  (573,)\n","logs prob looks like  torch.Size([573])\n","torch.from_numpy(rewards) looks like  torch.Size([573])\n","rewards looks like  (443,)\n","log_probs looks like  (443,)\n","logs prob looks like  torch.Size([443])\n","torch.from_numpy(rewards) looks like  torch.Size([443])\n","rewards looks like  (444,)\n","log_probs looks like  (444,)\n","logs prob looks like  torch.Size([444])\n","torch.from_numpy(rewards) looks like  torch.Size([444])\n","rewards looks like  (488,)\n","log_probs looks like  (488,)\n","logs prob looks like  torch.Size([488])\n","torch.from_numpy(rewards) looks like  torch.Size([488])\n","rewards looks like  (558,)\n","log_probs looks like  (558,)\n","logs prob looks like  torch.Size([558])\n","torch.from_numpy(rewards) looks like  torch.Size([558])\n","rewards looks like  (516,)\n","log_probs looks like  (516,)\n","logs prob looks like  torch.Size([516])\n","torch.from_numpy(rewards) looks like  torch.Size([516])\n","rewards looks like  (697,)\n","log_probs looks like  (697,)\n","logs prob looks like  torch.Size([697])\n","torch.from_numpy(rewards) looks like  torch.Size([697])\n","rewards looks like  (440,)\n","log_probs looks like  (440,)\n","logs prob looks like  torch.Size([440])\n","torch.from_numpy(rewards) looks like  torch.Size([440])\n","rewards looks like  (600,)\n","log_probs looks like  (600,)\n","logs prob looks like  torch.Size([600])\n","torch.from_numpy(rewards) looks like  torch.Size([600])\n","rewards looks like  (569,)\n","log_probs looks like  (569,)\n","logs prob looks like  torch.Size([569])\n","torch.from_numpy(rewards) looks like  torch.Size([569])\n","rewards looks like  (568,)\n","log_probs looks like  (568,)\n","logs prob looks like  torch.Size([568])\n","torch.from_numpy(rewards) looks like  torch.Size([568])\n","rewards looks like  (512,)\n","log_probs looks like  (512,)\n","logs prob looks like  torch.Size([512])\n","torch.from_numpy(rewards) looks like  torch.Size([512])\n","rewards looks like  (697,)\n","log_probs looks like  (697,)\n","logs prob looks like  torch.Size([697])\n","torch.from_numpy(rewards) looks like  torch.Size([697])\n","rewards looks like  (492,)\n","log_probs looks like  (492,)\n","logs prob looks like  torch.Size([492])\n","torch.from_numpy(rewards) looks like  torch.Size([492])\n","rewards looks like  (604,)\n","log_probs looks like  (604,)\n","logs prob looks like  torch.Size([604])\n","torch.from_numpy(rewards) looks like  torch.Size([604])\n","rewards looks like  (605,)\n","log_probs looks like  (605,)\n","logs prob looks like  torch.Size([605])\n","torch.from_numpy(rewards) looks like  torch.Size([605])\n","rewards looks like  (647,)\n","log_probs looks like  (647,)\n","logs prob looks like  torch.Size([647])\n","torch.from_numpy(rewards) looks like  torch.Size([647])\n","rewards looks like  (520,)\n","log_probs looks like  (520,)\n","logs prob looks like  torch.Size([520])\n","torch.from_numpy(rewards) looks like  torch.Size([520])\n","rewards looks like  (509,)\n","log_probs looks like  (509,)\n","logs prob looks like  torch.Size([509])\n","torch.from_numpy(rewards) looks like  torch.Size([509])\n","rewards looks like  (518,)\n","log_probs looks like  (518,)\n","logs prob looks like  torch.Size([518])\n","torch.from_numpy(rewards) looks like  torch.Size([518])\n","rewards looks like  (560,)\n","log_probs looks like  (560,)\n","logs prob looks like  torch.Size([560])\n","torch.from_numpy(rewards) looks like  torch.Size([560])\n","rewards looks like  (456,)\n","log_probs looks like  (456,)\n","logs prob looks like  torch.Size([456])\n","torch.from_numpy(rewards) looks like  torch.Size([456])\n","rewards looks like  (622,)\n","log_probs looks like  (622,)\n","logs prob looks like  torch.Size([622])\n","torch.from_numpy(rewards) looks like  torch.Size([622])\n","rewards looks like  (402,)\n","log_probs looks like  (402,)\n","logs prob looks like  torch.Size([402])\n","torch.from_numpy(rewards) looks like  torch.Size([402])\n","rewards looks like  (462,)\n","log_probs looks like  (462,)\n","logs prob looks like  torch.Size([462])\n","torch.from_numpy(rewards) looks like  torch.Size([462])\n","rewards looks like  (435,)\n","log_probs looks like  (435,)\n","logs prob looks like  torch.Size([435])\n","torch.from_numpy(rewards) looks like  torch.Size([435])\n","rewards looks like  (433,)\n","log_probs looks like  (433,)\n","logs prob looks like  torch.Size([433])\n","torch.from_numpy(rewards) looks like  torch.Size([433])\n","rewards looks like  (560,)\n","log_probs looks like  (560,)\n","logs prob looks like  torch.Size([560])\n","torch.from_numpy(rewards) looks like  torch.Size([560])\n","rewards looks like  (527,)\n","log_probs looks like  (527,)\n","logs prob looks like  torch.Size([527])\n","torch.from_numpy(rewards) looks like  torch.Size([527])\n","rewards looks like  (589,)\n","log_probs looks like  (589,)\n","logs prob looks like  torch.Size([589])\n","torch.from_numpy(rewards) looks like  torch.Size([589])\n","rewards looks like  (558,)\n","log_probs looks like  (558,)\n","logs prob looks like  torch.Size([558])\n","torch.from_numpy(rewards) looks like  torch.Size([558])\n","rewards looks like  (567,)\n","log_probs looks like  (567,)\n","logs prob looks like  torch.Size([567])\n","torch.from_numpy(rewards) looks like  torch.Size([567])\n","rewards looks like  (519,)\n","log_probs looks like  (519,)\n","logs prob looks like  torch.Size([519])\n","torch.from_numpy(rewards) looks like  torch.Size([519])\n","rewards looks like  (543,)\n","log_probs looks like  (543,)\n","logs prob looks like  torch.Size([543])\n","torch.from_numpy(rewards) looks like  torch.Size([543])\n","rewards looks like  (487,)\n","log_probs looks like  (487,)\n","logs prob looks like  torch.Size([487])\n","torch.from_numpy(rewards) looks like  torch.Size([487])\n","rewards looks like  (672,)\n","log_probs looks like  (672,)\n","logs prob looks like  torch.Size([672])\n","torch.from_numpy(rewards) looks like  torch.Size([672])\n","rewards looks like  (734,)\n","log_probs looks like  (734,)\n","logs prob looks like  torch.Size([734])\n","torch.from_numpy(rewards) looks like  torch.Size([734])\n","rewards looks like  (546,)\n","log_probs looks like  (546,)\n","logs prob looks like  torch.Size([546])\n","torch.from_numpy(rewards) looks like  torch.Size([546])\n","rewards looks like  (545,)\n","log_probs looks like  (545,)\n","logs prob looks like  torch.Size([545])\n","torch.from_numpy(rewards) looks like  torch.Size([545])\n","rewards looks like  (520,)\n","log_probs looks like  (520,)\n","logs prob looks like  torch.Size([520])\n","torch.from_numpy(rewards) looks like  torch.Size([520])\n","rewards looks like  (524,)\n","log_probs looks like  (524,)\n","logs prob looks like  torch.Size([524])\n","torch.from_numpy(rewards) looks like  torch.Size([524])\n","rewards looks like  (556,)\n","log_probs looks like  (556,)\n","logs prob looks like  torch.Size([556])\n","torch.from_numpy(rewards) looks like  torch.Size([556])\n","rewards looks like  (524,)\n","log_probs looks like  (524,)\n","logs prob looks like  torch.Size([524])\n","torch.from_numpy(rewards) looks like  torch.Size([524])\n","rewards looks like  (602,)\n","log_probs looks like  (602,)\n","logs prob looks like  torch.Size([602])\n","torch.from_numpy(rewards) looks like  torch.Size([602])\n","rewards looks like  (475,)\n","log_probs looks like  (475,)\n","logs prob looks like  torch.Size([475])\n","torch.from_numpy(rewards) looks like  torch.Size([475])\n","rewards looks like  (595,)\n","log_probs looks like  (595,)\n","logs prob looks like  torch.Size([595])\n","torch.from_numpy(rewards) looks like  torch.Size([595])\n","rewards looks like  (554,)\n","log_probs looks like  (554,)\n","logs prob looks like  torch.Size([554])\n","torch.from_numpy(rewards) looks like  torch.Size([554])\n","rewards looks like  (588,)\n","log_probs looks like  (588,)\n","logs prob looks like  torch.Size([588])\n","torch.from_numpy(rewards) looks like  torch.Size([588])\n","rewards looks like  (511,)\n","log_probs looks like  (511,)\n","logs prob looks like  torch.Size([511])\n","torch.from_numpy(rewards) looks like  torch.Size([511])\n","rewards looks like  (466,)\n","log_probs looks like  (466,)\n","logs prob looks like  torch.Size([466])\n","torch.from_numpy(rewards) looks like  torch.Size([466])\n","rewards looks like  (662,)\n","log_probs looks like  (662,)\n","logs prob looks like  torch.Size([662])\n","torch.from_numpy(rewards) looks like  torch.Size([662])\n","rewards looks like  (851,)\n","log_probs looks like  (851,)\n","logs prob looks like  torch.Size([851])\n","torch.from_numpy(rewards) looks like  torch.Size([851])\n","rewards looks like  (588,)\n","log_probs looks like  (588,)\n","logs prob looks like  torch.Size([588])\n","torch.from_numpy(rewards) looks like  torch.Size([588])\n","rewards looks like  (566,)\n","log_probs looks like  (566,)\n","logs prob looks like  torch.Size([566])\n","torch.from_numpy(rewards) looks like  torch.Size([566])\n","rewards looks like  (599,)\n","log_probs looks like  (599,)\n","logs prob looks like  torch.Size([599])\n","torch.from_numpy(rewards) looks like  torch.Size([599])\n","rewards looks like  (483,)\n","log_probs looks like  (483,)\n","logs prob looks like  torch.Size([483])\n","torch.from_numpy(rewards) looks like  torch.Size([483])\n","rewards looks like  (475,)\n","log_probs looks like  (475,)\n","logs prob looks like  torch.Size([475])\n","torch.from_numpy(rewards) looks like  torch.Size([475])\n","rewards looks like  (531,)\n","log_probs looks like  (531,)\n","logs prob looks like  torch.Size([531])\n","torch.from_numpy(rewards) looks like  torch.Size([531])\n","rewards looks like  (454,)\n","log_probs looks like  (454,)\n","logs prob looks like  torch.Size([454])\n","torch.from_numpy(rewards) looks like  torch.Size([454])\n","rewards looks like  (484,)\n","log_probs looks like  (484,)\n","logs prob looks like  torch.Size([484])\n","torch.from_numpy(rewards) looks like  torch.Size([484])\n","rewards looks like  (553,)\n","log_probs looks like  (553,)\n","logs prob looks like  torch.Size([553])\n","torch.from_numpy(rewards) looks like  torch.Size([553])\n","rewards looks like  (602,)\n","log_probs looks like  (602,)\n","logs prob looks like  torch.Size([602])\n","torch.from_numpy(rewards) looks like  torch.Size([602])\n","rewards looks like  (486,)\n","log_probs looks like  (486,)\n","logs prob looks like  torch.Size([486])\n","torch.from_numpy(rewards) looks like  torch.Size([486])\n","rewards looks like  (568,)\n","log_probs looks like  (568,)\n","logs prob looks like  torch.Size([568])\n","torch.from_numpy(rewards) looks like  torch.Size([568])\n","rewards looks like  (592,)\n","log_probs looks like  (592,)\n","logs prob looks like  torch.Size([592])\n","torch.from_numpy(rewards) looks like  torch.Size([592])\n","rewards looks like  (574,)\n","log_probs looks like  (574,)\n","logs prob looks like  torch.Size([574])\n","torch.from_numpy(rewards) looks like  torch.Size([574])\n","rewards looks like  (483,)\n","log_probs looks like  (483,)\n","logs prob looks like  torch.Size([483])\n","torch.from_numpy(rewards) looks like  torch.Size([483])\n","rewards looks like  (501,)\n","log_probs looks like  (501,)\n","logs prob looks like  torch.Size([501])\n","torch.from_numpy(rewards) looks like  torch.Size([501])\n","rewards looks like  (375,)\n","log_probs looks like  (375,)\n","logs prob looks like  torch.Size([375])\n","torch.from_numpy(rewards) looks like  torch.Size([375])\n","rewards looks like  (503,)\n","log_probs looks like  (503,)\n","logs prob looks like  torch.Size([503])\n","torch.from_numpy(rewards) looks like  torch.Size([503])\n","rewards looks like  (505,)\n","log_probs looks like  (505,)\n","logs prob looks like  torch.Size([505])\n","torch.from_numpy(rewards) looks like  torch.Size([505])\n","rewards looks like  (447,)\n","log_probs looks like  (447,)\n","logs prob looks like  torch.Size([447])\n","torch.from_numpy(rewards) looks like  torch.Size([447])\n","rewards looks like  (420,)\n","log_probs looks like  (420,)\n","logs prob looks like  torch.Size([420])\n","torch.from_numpy(rewards) looks like  torch.Size([420])\n","rewards looks like  (596,)\n","log_probs looks like  (596,)\n","logs prob looks like  torch.Size([596])\n","torch.from_numpy(rewards) looks like  torch.Size([596])\n","rewards looks like  (524,)\n","log_probs looks like  (524,)\n","logs prob looks like  torch.Size([524])\n","torch.from_numpy(rewards) looks like  torch.Size([524])\n","rewards looks like  (598,)\n","log_probs looks like  (598,)\n","logs prob looks like  torch.Size([598])\n","torch.from_numpy(rewards) looks like  torch.Size([598])\n","rewards looks like  (649,)\n","log_probs looks like  (649,)\n","logs prob looks like  torch.Size([649])\n","torch.from_numpy(rewards) looks like  torch.Size([649])\n","rewards looks like  (597,)\n","log_probs looks like  (597,)\n","logs prob looks like  torch.Size([597])\n","torch.from_numpy(rewards) looks like  torch.Size([597])\n","rewards looks like  (596,)\n","log_probs looks like  (596,)\n","logs prob looks like  torch.Size([596])\n","torch.from_numpy(rewards) looks like  torch.Size([596])\n","rewards looks like  (509,)\n","log_probs looks like  (509,)\n","logs prob looks like  torch.Size([509])\n","torch.from_numpy(rewards) looks like  torch.Size([509])\n","rewards looks like  (473,)\n","log_probs looks like  (473,)\n","logs prob looks like  torch.Size([473])\n","torch.from_numpy(rewards) looks like  torch.Size([473])\n","rewards looks like  (554,)\n","log_probs looks like  (554,)\n","logs prob looks like  torch.Size([554])\n","torch.from_numpy(rewards) looks like  torch.Size([554])\n","rewards looks like  (570,)\n","log_probs looks like  (570,)\n","logs prob looks like  torch.Size([570])\n","torch.from_numpy(rewards) looks like  torch.Size([570])\n","rewards looks like  (490,)\n","log_probs looks like  (490,)\n","logs prob looks like  torch.Size([490])\n","torch.from_numpy(rewards) looks like  torch.Size([490])\n","rewards looks like  (531,)\n","log_probs looks like  (531,)\n","logs prob looks like  torch.Size([531])\n","torch.from_numpy(rewards) looks like  torch.Size([531])\n","rewards looks like  (411,)\n","log_probs looks like  (411,)\n","logs prob looks like  torch.Size([411])\n","torch.from_numpy(rewards) looks like  torch.Size([411])\n","rewards looks like  (570,)\n","log_probs looks like  (570,)\n","logs prob looks like  torch.Size([570])\n","torch.from_numpy(rewards) looks like  torch.Size([570])\n","rewards looks like  (510,)\n","log_probs looks like  (510,)\n","logs prob looks like  torch.Size([510])\n","torch.from_numpy(rewards) looks like  torch.Size([510])\n","rewards looks like  (511,)\n","log_probs looks like  (511,)\n","logs prob looks like  torch.Size([511])\n","torch.from_numpy(rewards) looks like  torch.Size([511])\n","rewards looks like  (574,)\n","log_probs looks like  (574,)\n","logs prob looks like  torch.Size([574])\n","torch.from_numpy(rewards) looks like  torch.Size([574])\n","rewards looks like  (698,)\n","log_probs looks like  (698,)\n","logs prob looks like  torch.Size([698])\n","torch.from_numpy(rewards) looks like  torch.Size([698])\n","rewards looks like  (667,)\n","log_probs looks like  (667,)\n","logs prob looks like  torch.Size([667])\n","torch.from_numpy(rewards) looks like  torch.Size([667])\n","rewards looks like  (601,)\n","log_probs looks like  (601,)\n","logs prob looks like  torch.Size([601])\n","torch.from_numpy(rewards) looks like  torch.Size([601])\n","rewards looks like  (472,)\n","log_probs looks like  (472,)\n","logs prob looks like  torch.Size([472])\n","torch.from_numpy(rewards) looks like  torch.Size([472])\n","rewards looks like  (727,)\n","log_probs looks like  (727,)\n","logs prob looks like  torch.Size([727])\n","torch.from_numpy(rewards) looks like  torch.Size([727])\n","rewards looks like  (606,)\n","log_probs looks like  (606,)\n","logs prob looks like  torch.Size([606])\n","torch.from_numpy(rewards) looks like  torch.Size([606])\n","rewards looks like  (1488,)\n","log_probs looks like  (1488,)\n","logs prob looks like  torch.Size([1488])\n","torch.from_numpy(rewards) looks like  torch.Size([1488])\n","rewards looks like  (715,)\n","log_probs looks like  (715,)\n","logs prob looks like  torch.Size([715])\n","torch.from_numpy(rewards) looks like  torch.Size([715])\n","rewards looks like  (683,)\n","log_probs looks like  (683,)\n","logs prob looks like  torch.Size([683])\n","torch.from_numpy(rewards) looks like  torch.Size([683])\n","rewards looks like  (504,)\n","log_probs looks like  (504,)\n","logs prob looks like  torch.Size([504])\n","torch.from_numpy(rewards) looks like  torch.Size([504])\n","rewards looks like  (644,)\n","log_probs looks like  (644,)\n","logs prob looks like  torch.Size([644])\n","torch.from_numpy(rewards) looks like  torch.Size([644])\n","rewards looks like  (554,)\n","log_probs looks like  (554,)\n","logs prob looks like  torch.Size([554])\n","torch.from_numpy(rewards) looks like  torch.Size([554])\n","rewards looks like  (551,)\n","log_probs looks like  (551,)\n","logs prob looks like  torch.Size([551])\n","torch.from_numpy(rewards) looks like  torch.Size([551])\n","rewards looks like  (587,)\n","log_probs looks like  (587,)\n","logs prob looks like  torch.Size([587])\n","torch.from_numpy(rewards) looks like  torch.Size([587])\n","rewards looks like  (804,)\n","log_probs looks like  (804,)\n","logs prob looks like  torch.Size([804])\n","torch.from_numpy(rewards) looks like  torch.Size([804])\n","rewards looks like  (595,)\n","log_probs looks like  (595,)\n","logs prob looks like  torch.Size([595])\n","torch.from_numpy(rewards) looks like  torch.Size([595])\n","rewards looks like  (525,)\n","log_probs looks like  (525,)\n","logs prob looks like  torch.Size([525])\n","torch.from_numpy(rewards) looks like  torch.Size([525])\n","rewards looks like  (810,)\n","log_probs looks like  (810,)\n","logs prob looks like  torch.Size([810])\n","torch.from_numpy(rewards) looks like  torch.Size([810])\n","rewards looks like  (1693,)\n","log_probs looks like  (1693,)\n","logs prob looks like  torch.Size([1693])\n","torch.from_numpy(rewards) looks like  torch.Size([1693])\n","rewards looks like  (678,)\n","log_probs looks like  (678,)\n","logs prob looks like  torch.Size([678])\n","torch.from_numpy(rewards) looks like  torch.Size([678])\n","rewards looks like  (735,)\n","log_probs looks like  (735,)\n","logs prob looks like  torch.Size([735])\n","torch.from_numpy(rewards) looks like  torch.Size([735])\n","rewards looks like  (561,)\n","log_probs looks like  (561,)\n","logs prob looks like  torch.Size([561])\n","torch.from_numpy(rewards) looks like  torch.Size([561])\n","rewards looks like  (670,)\n","log_probs looks like  (670,)\n","logs prob looks like  torch.Size([670])\n","torch.from_numpy(rewards) looks like  torch.Size([670])\n","rewards looks like  (630,)\n","log_probs looks like  (630,)\n","logs prob looks like  torch.Size([630])\n","torch.from_numpy(rewards) looks like  torch.Size([630])\n","rewards looks like  (582,)\n","log_probs looks like  (582,)\n","logs prob looks like  torch.Size([582])\n","torch.from_numpy(rewards) looks like  torch.Size([582])\n","rewards looks like  (738,)\n","log_probs looks like  (738,)\n","logs prob looks like  torch.Size([738])\n","torch.from_numpy(rewards) looks like  torch.Size([738])\n","rewards looks like  (602,)\n","log_probs looks like  (602,)\n","logs prob looks like  torch.Size([602])\n","torch.from_numpy(rewards) looks like  torch.Size([602])\n","rewards looks like  (693,)\n","log_probs looks like  (693,)\n","logs prob looks like  torch.Size([693])\n","torch.from_numpy(rewards) looks like  torch.Size([693])\n","rewards looks like  (698,)\n","log_probs looks like  (698,)\n","logs prob looks like  torch.Size([698])\n","torch.from_numpy(rewards) looks like  torch.Size([698])\n","rewards looks like  (741,)\n","log_probs looks like  (741,)\n","logs prob looks like  torch.Size([741])\n","torch.from_numpy(rewards) looks like  torch.Size([741])\n","rewards looks like  (693,)\n","log_probs looks like  (693,)\n","logs prob looks like  torch.Size([693])\n","torch.from_numpy(rewards) looks like  torch.Size([693])\n","rewards looks like  (498,)\n","log_probs looks like  (498,)\n","logs prob looks like  torch.Size([498])\n","torch.from_numpy(rewards) looks like  torch.Size([498])\n","rewards looks like  (645,)\n","log_probs looks like  (645,)\n","logs prob looks like  torch.Size([645])\n","torch.from_numpy(rewards) looks like  torch.Size([645])\n","rewards looks like  (809,)\n","log_probs looks like  (809,)\n","logs prob looks like  torch.Size([809])\n","torch.from_numpy(rewards) looks like  torch.Size([809])\n","rewards looks like  (638,)\n","log_probs looks like  (638,)\n","logs prob looks like  torch.Size([638])\n","torch.from_numpy(rewards) looks like  torch.Size([638])\n","rewards looks like  (1301,)\n","log_probs looks like  (1301,)\n","logs prob looks like  torch.Size([1301])\n","torch.from_numpy(rewards) looks like  torch.Size([1301])\n","rewards looks like  (746,)\n","log_probs looks like  (746,)\n","logs prob looks like  torch.Size([746])\n","torch.from_numpy(rewards) looks like  torch.Size([746])\n","rewards looks like  (672,)\n","log_probs looks like  (672,)\n","logs prob looks like  torch.Size([672])\n","torch.from_numpy(rewards) looks like  torch.Size([672])\n","rewards looks like  (698,)\n","log_probs looks like  (698,)\n","logs prob looks like  torch.Size([698])\n","torch.from_numpy(rewards) looks like  torch.Size([698])\n","rewards looks like  (1158,)\n","log_probs looks like  (1158,)\n","logs prob looks like  torch.Size([1158])\n","torch.from_numpy(rewards) looks like  torch.Size([1158])\n","rewards looks like  (694,)\n","log_probs looks like  (694,)\n","logs prob looks like  torch.Size([694])\n","torch.from_numpy(rewards) looks like  torch.Size([694])\n","rewards looks like  (855,)\n","log_probs looks like  (855,)\n","logs prob looks like  torch.Size([855])\n","torch.from_numpy(rewards) looks like  torch.Size([855])\n","rewards looks like  (1319,)\n","log_probs looks like  (1319,)\n","logs prob looks like  torch.Size([1319])\n","torch.from_numpy(rewards) looks like  torch.Size([1319])\n","rewards looks like  (740,)\n","log_probs looks like  (740,)\n","logs prob looks like  torch.Size([740])\n","torch.from_numpy(rewards) looks like  torch.Size([740])\n","rewards looks like  (658,)\n","log_probs looks like  (658,)\n","logs prob looks like  torch.Size([658])\n","torch.from_numpy(rewards) looks like  torch.Size([658])\n","rewards looks like  (695,)\n","log_probs looks like  (695,)\n","logs prob looks like  torch.Size([695])\n","torch.from_numpy(rewards) looks like  torch.Size([695])\n","rewards looks like  (1557,)\n","log_probs looks like  (1557,)\n","logs prob looks like  torch.Size([1557])\n","torch.from_numpy(rewards) looks like  torch.Size([1557])\n","rewards looks like  (708,)\n","log_probs looks like  (708,)\n","logs prob looks like  torch.Size([708])\n","torch.from_numpy(rewards) looks like  torch.Size([708])\n","rewards looks like  (896,)\n","log_probs looks like  (896,)\n","logs prob looks like  torch.Size([896])\n","torch.from_numpy(rewards) looks like  torch.Size([896])\n","rewards looks like  (805,)\n","log_probs looks like  (805,)\n","logs prob looks like  torch.Size([805])\n","torch.from_numpy(rewards) looks like  torch.Size([805])\n","rewards looks like  (674,)\n","log_probs looks like  (674,)\n","logs prob looks like  torch.Size([674])\n","torch.from_numpy(rewards) looks like  torch.Size([674])\n","rewards looks like  (865,)\n","log_probs looks like  (865,)\n","logs prob looks like  torch.Size([865])\n","torch.from_numpy(rewards) looks like  torch.Size([865])\n","rewards looks like  (705,)\n","log_probs looks like  (705,)\n","logs prob looks like  torch.Size([705])\n","torch.from_numpy(rewards) looks like  torch.Size([705])\n","rewards looks like  (1012,)\n","log_probs looks like  (1012,)\n","logs prob looks like  torch.Size([1012])\n","torch.from_numpy(rewards) looks like  torch.Size([1012])\n","rewards looks like  (808,)\n","log_probs looks like  (808,)\n","logs prob looks like  torch.Size([808])\n","torch.from_numpy(rewards) looks like  torch.Size([808])\n","rewards looks like  (826,)\n","log_probs looks like  (826,)\n","logs prob looks like  torch.Size([826])\n","torch.from_numpy(rewards) looks like  torch.Size([826])\n","rewards looks like  (932,)\n","log_probs looks like  (932,)\n","logs prob looks like  torch.Size([932])\n","torch.from_numpy(rewards) looks like  torch.Size([932])\n","rewards looks like  (853,)\n","log_probs looks like  (853,)\n","logs prob looks like  torch.Size([853])\n","torch.from_numpy(rewards) looks like  torch.Size([853])\n","rewards looks like  (956,)\n","log_probs looks like  (956,)\n","logs prob looks like  torch.Size([956])\n","torch.from_numpy(rewards) looks like  torch.Size([956])\n","rewards looks like  (1285,)\n","log_probs looks like  (1285,)\n","logs prob looks like  torch.Size([1285])\n","torch.from_numpy(rewards) looks like  torch.Size([1285])\n","rewards looks like  (937,)\n","log_probs looks like  (937,)\n","logs prob looks like  torch.Size([937])\n","torch.from_numpy(rewards) looks like  torch.Size([937])\n","rewards looks like  (870,)\n","log_probs looks like  (870,)\n","logs prob looks like  torch.Size([870])\n","torch.from_numpy(rewards) looks like  torch.Size([870])\n","rewards looks like  (991,)\n","log_probs looks like  (991,)\n","logs prob looks like  torch.Size([991])\n","torch.from_numpy(rewards) looks like  torch.Size([991])\n","rewards looks like  (1187,)\n","log_probs looks like  (1187,)\n","logs prob looks like  torch.Size([1187])\n","torch.from_numpy(rewards) looks like  torch.Size([1187])\n","rewards looks like  (1095,)\n","log_probs looks like  (1095,)\n","logs prob looks like  torch.Size([1095])\n","torch.from_numpy(rewards) looks like  torch.Size([1095])\n","rewards looks like  (966,)\n","log_probs looks like  (966,)\n","logs prob looks like  torch.Size([966])\n","torch.from_numpy(rewards) looks like  torch.Size([966])\n","rewards looks like  (945,)\n","log_probs looks like  (945,)\n","logs prob looks like  torch.Size([945])\n","torch.from_numpy(rewards) looks like  torch.Size([945])\n","rewards looks like  (1388,)\n","log_probs looks like  (1388,)\n","logs prob looks like  torch.Size([1388])\n","torch.from_numpy(rewards) looks like  torch.Size([1388])\n","rewards looks like  (845,)\n","log_probs looks like  (845,)\n","logs prob looks like  torch.Size([845])\n","torch.from_numpy(rewards) looks like  torch.Size([845])\n","rewards looks like  (849,)\n","log_probs looks like  (849,)\n","logs prob looks like  torch.Size([849])\n","torch.from_numpy(rewards) looks like  torch.Size([849])\n","rewards looks like  (617,)\n","log_probs looks like  (617,)\n","logs prob looks like  torch.Size([617])\n","torch.from_numpy(rewards) looks like  torch.Size([617])\n","rewards looks like  (675,)\n","log_probs looks like  (675,)\n","logs prob looks like  torch.Size([675])\n","torch.from_numpy(rewards) looks like  torch.Size([675])\n","rewards looks like  (885,)\n","log_probs looks like  (885,)\n","logs prob looks like  torch.Size([885])\n","torch.from_numpy(rewards) looks like  torch.Size([885])\n","rewards looks like  (700,)\n","log_probs looks like  (700,)\n","logs prob looks like  torch.Size([700])\n","torch.from_numpy(rewards) looks like  torch.Size([700])\n","rewards looks like  (621,)\n","log_probs looks like  (621,)\n","logs prob looks like  torch.Size([621])\n","torch.from_numpy(rewards) looks like  torch.Size([621])\n","rewards looks like  (855,)\n","log_probs looks like  (855,)\n","logs prob looks like  torch.Size([855])\n","torch.from_numpy(rewards) looks like  torch.Size([855])\n","rewards looks like  (781,)\n","log_probs looks like  (781,)\n","logs prob looks like  torch.Size([781])\n","torch.from_numpy(rewards) looks like  torch.Size([781])\n","rewards looks like  (852,)\n","log_probs looks like  (852,)\n","logs prob looks like  torch.Size([852])\n","torch.from_numpy(rewards) looks like  torch.Size([852])\n","rewards looks like  (886,)\n","log_probs looks like  (886,)\n","logs prob looks like  torch.Size([886])\n","torch.from_numpy(rewards) looks like  torch.Size([886])\n","rewards looks like  (855,)\n","log_probs looks like  (855,)\n","logs prob looks like  torch.Size([855])\n","torch.from_numpy(rewards) looks like  torch.Size([855])\n","rewards looks like  (850,)\n","log_probs looks like  (850,)\n","logs prob looks like  torch.Size([850])\n","torch.from_numpy(rewards) looks like  torch.Size([850])\n","rewards looks like  (1203,)\n","log_probs looks like  (1203,)\n","logs prob looks like  torch.Size([1203])\n","torch.from_numpy(rewards) looks like  torch.Size([1203])\n","rewards looks like  (1754,)\n","log_probs looks like  (1754,)\n","logs prob looks like  torch.Size([1754])\n","torch.from_numpy(rewards) looks like  torch.Size([1754])\n","rewards looks like  (865,)\n","log_probs looks like  (865,)\n","logs prob looks like  torch.Size([865])\n","torch.from_numpy(rewards) looks like  torch.Size([865])\n","rewards looks like  (1776,)\n","log_probs looks like  (1776,)\n","logs prob looks like  torch.Size([1776])\n","torch.from_numpy(rewards) looks like  torch.Size([1776])\n","rewards looks like  (772,)\n","log_probs looks like  (772,)\n","logs prob looks like  torch.Size([772])\n","torch.from_numpy(rewards) looks like  torch.Size([772])\n","rewards looks like  (815,)\n","log_probs looks like  (815,)\n","logs prob looks like  torch.Size([815])\n","torch.from_numpy(rewards) looks like  torch.Size([815])\n","rewards looks like  (747,)\n","log_probs looks like  (747,)\n","logs prob looks like  torch.Size([747])\n","torch.from_numpy(rewards) looks like  torch.Size([747])\n","rewards looks like  (732,)\n","log_probs looks like  (732,)\n","logs prob looks like  torch.Size([732])\n","torch.from_numpy(rewards) looks like  torch.Size([732])\n","rewards looks like  (1724,)\n","log_probs looks like  (1724,)\n","logs prob looks like  torch.Size([1724])\n","torch.from_numpy(rewards) looks like  torch.Size([1724])\n","rewards looks like  (1662,)\n","log_probs looks like  (1662,)\n","logs prob looks like  torch.Size([1662])\n","torch.from_numpy(rewards) looks like  torch.Size([1662])\n","rewards looks like  (859,)\n","log_probs looks like  (859,)\n","logs prob looks like  torch.Size([859])\n","torch.from_numpy(rewards) looks like  torch.Size([859])\n","rewards looks like  (1847,)\n","log_probs looks like  (1847,)\n","logs prob looks like  torch.Size([1847])\n","torch.from_numpy(rewards) looks like  torch.Size([1847])\n","rewards looks like  (949,)\n","log_probs looks like  (949,)\n","logs prob looks like  torch.Size([949])\n","torch.from_numpy(rewards) looks like  torch.Size([949])\n","rewards looks like  (1119,)\n","log_probs looks like  (1119,)\n","logs prob looks like  torch.Size([1119])\n","torch.from_numpy(rewards) looks like  torch.Size([1119])\n","rewards looks like  (974,)\n","log_probs looks like  (974,)\n","logs prob looks like  torch.Size([974])\n","torch.from_numpy(rewards) looks like  torch.Size([974])\n","rewards looks like  (804,)\n","log_probs looks like  (804,)\n","logs prob looks like  torch.Size([804])\n","torch.from_numpy(rewards) looks like  torch.Size([804])\n","rewards looks like  (979,)\n","log_probs looks like  (979,)\n","logs prob looks like  torch.Size([979])\n","torch.from_numpy(rewards) looks like  torch.Size([979])\n","rewards looks like  (1298,)\n","log_probs looks like  (1298,)\n","logs prob looks like  torch.Size([1298])\n","torch.from_numpy(rewards) looks like  torch.Size([1298])\n","rewards looks like  (1014,)\n","log_probs looks like  (1014,)\n","logs prob looks like  torch.Size([1014])\n","torch.from_numpy(rewards) looks like  torch.Size([1014])\n","rewards looks like  (990,)\n","log_probs looks like  (990,)\n","logs prob looks like  torch.Size([990])\n","torch.from_numpy(rewards) looks like  torch.Size([990])\n","rewards looks like  (937,)\n","log_probs looks like  (937,)\n","logs prob looks like  torch.Size([937])\n","torch.from_numpy(rewards) looks like  torch.Size([937])\n","rewards looks like  (1370,)\n","log_probs looks like  (1370,)\n","logs prob looks like  torch.Size([1370])\n","torch.from_numpy(rewards) looks like  torch.Size([1370])\n","rewards looks like  (949,)\n","log_probs looks like  (949,)\n","logs prob looks like  torch.Size([949])\n","torch.from_numpy(rewards) looks like  torch.Size([949])\n","rewards looks like  (972,)\n","log_probs looks like  (972,)\n","logs prob looks like  torch.Size([972])\n","torch.from_numpy(rewards) looks like  torch.Size([972])\n","rewards looks like  (1720,)\n","log_probs looks like  (1720,)\n","logs prob looks like  torch.Size([1720])\n","torch.from_numpy(rewards) looks like  torch.Size([1720])\n","rewards looks like  (1587,)\n","log_probs looks like  (1587,)\n","logs prob looks like  torch.Size([1587])\n","torch.from_numpy(rewards) looks like  torch.Size([1587])\n","rewards looks like  (1762,)\n","log_probs looks like  (1762,)\n","logs prob looks like  torch.Size([1762])\n","torch.from_numpy(rewards) looks like  torch.Size([1762])\n","rewards looks like  (1788,)\n","log_probs looks like  (1788,)\n","logs prob looks like  torch.Size([1788])\n","torch.from_numpy(rewards) looks like  torch.Size([1788])\n","rewards looks like  (1798,)\n","log_probs looks like  (1798,)\n","logs prob looks like  torch.Size([1798])\n","torch.from_numpy(rewards) looks like  torch.Size([1798])\n","rewards looks like  (2508,)\n","log_probs looks like  (2508,)\n","logs prob looks like  torch.Size([2508])\n","torch.from_numpy(rewards) looks like  torch.Size([2508])\n","rewards looks like  (1861,)\n","log_probs looks like  (1861,)\n","logs prob looks like  torch.Size([1861])\n","torch.from_numpy(rewards) looks like  torch.Size([1861])\n","rewards looks like  (849,)\n","log_probs looks like  (849,)\n","logs prob looks like  torch.Size([849])\n","torch.from_numpy(rewards) looks like  torch.Size([849])\n","rewards looks like  (2065,)\n","log_probs looks like  (2065,)\n","logs prob looks like  torch.Size([2065])\n","torch.from_numpy(rewards) looks like  torch.Size([2065])\n","rewards looks like  (1291,)\n","log_probs looks like  (1291,)\n","logs prob looks like  torch.Size([1291])\n","torch.from_numpy(rewards) looks like  torch.Size([1291])\n","rewards looks like  (2662,)\n","log_probs looks like  (2662,)\n","logs prob looks like  torch.Size([2662])\n","torch.from_numpy(rewards) looks like  torch.Size([2662])\n","rewards looks like  (1017,)\n","log_probs looks like  (1017,)\n","logs prob looks like  torch.Size([1017])\n","torch.from_numpy(rewards) looks like  torch.Size([1017])\n","rewards looks like  (785,)\n","log_probs looks like  (785,)\n","logs prob looks like  torch.Size([785])\n","torch.from_numpy(rewards) looks like  torch.Size([785])\n","rewards looks like  (3251,)\n","log_probs looks like  (3251,)\n","logs prob looks like  torch.Size([3251])\n","torch.from_numpy(rewards) looks like  torch.Size([3251])\n","rewards looks like  (2267,)\n","log_probs looks like  (2267,)\n","logs prob looks like  torch.Size([2267])\n","torch.from_numpy(rewards) looks like  torch.Size([2267])\n","rewards looks like  (1436,)\n","log_probs looks like  (1436,)\n","logs prob looks like  torch.Size([1436])\n","torch.from_numpy(rewards) looks like  torch.Size([1436])\n","rewards looks like  (1695,)\n","log_probs looks like  (1695,)\n","logs prob looks like  torch.Size([1695])\n","torch.from_numpy(rewards) looks like  torch.Size([1695])\n","rewards looks like  (3305,)\n","log_probs looks like  (3305,)\n","logs prob looks like  torch.Size([3305])\n","torch.from_numpy(rewards) looks like  torch.Size([3305])\n","rewards looks like  (850,)\n","log_probs looks like  (850,)\n","logs prob looks like  torch.Size([850])\n","torch.from_numpy(rewards) looks like  torch.Size([850])\n","rewards looks like  (2231,)\n","log_probs looks like  (2231,)\n","logs prob looks like  torch.Size([2231])\n","torch.from_numpy(rewards) looks like  torch.Size([2231])\n","rewards looks like  (2732,)\n","log_probs looks like  (2732,)\n","logs prob looks like  torch.Size([2732])\n","torch.from_numpy(rewards) looks like  torch.Size([2732])\n","rewards looks like  (1732,)\n","log_probs looks like  (1732,)\n","logs prob looks like  torch.Size([1732])\n","torch.from_numpy(rewards) looks like  torch.Size([1732])\n","rewards looks like  (3296,)\n","log_probs looks like  (3296,)\n","logs prob looks like  torch.Size([3296])\n","torch.from_numpy(rewards) looks like  torch.Size([3296])\n","rewards looks like  (552,)\n","log_probs looks like  (552,)\n","logs prob looks like  torch.Size([552])\n","torch.from_numpy(rewards) looks like  torch.Size([552])\n","rewards looks like  (1334,)\n","log_probs looks like  (1334,)\n","logs prob looks like  torch.Size([1334])\n","torch.from_numpy(rewards) looks like  torch.Size([1334])\n","rewards looks like  (664,)\n","log_probs looks like  (664,)\n","logs prob looks like  torch.Size([664])\n","torch.from_numpy(rewards) looks like  torch.Size([664])\n","rewards looks like  (748,)\n","log_probs looks like  (748,)\n","logs prob looks like  torch.Size([748])\n","torch.from_numpy(rewards) looks like  torch.Size([748])\n","rewards looks like  (667,)\n","log_probs looks like  (667,)\n","logs prob looks like  torch.Size([667])\n","torch.from_numpy(rewards) looks like  torch.Size([667])\n","rewards looks like  (556,)\n","log_probs looks like  (556,)\n","logs prob looks like  torch.Size([556])\n","torch.from_numpy(rewards) looks like  torch.Size([556])\n","rewards looks like  (841,)\n","log_probs looks like  (841,)\n","logs prob looks like  torch.Size([841])\n","torch.from_numpy(rewards) looks like  torch.Size([841])\n","rewards looks like  (706,)\n","log_probs looks like  (706,)\n","logs prob looks like  torch.Size([706])\n","torch.from_numpy(rewards) looks like  torch.Size([706])\n","rewards looks like  (1080,)\n","log_probs looks like  (1080,)\n","logs prob looks like  torch.Size([1080])\n","torch.from_numpy(rewards) looks like  torch.Size([1080])\n","rewards looks like  (1970,)\n","log_probs looks like  (1970,)\n","logs prob looks like  torch.Size([1970])\n","torch.from_numpy(rewards) looks like  torch.Size([1970])\n","rewards looks like  (998,)\n","log_probs looks like  (998,)\n","logs prob looks like  torch.Size([998])\n","torch.from_numpy(rewards) looks like  torch.Size([998])\n","rewards looks like  (1152,)\n","log_probs looks like  (1152,)\n","logs prob looks like  torch.Size([1152])\n","torch.from_numpy(rewards) looks like  torch.Size([1152])\n","rewards looks like  (2519,)\n","log_probs looks like  (2519,)\n","logs prob looks like  torch.Size([2519])\n","torch.from_numpy(rewards) looks like  torch.Size([2519])\n","rewards looks like  (2871,)\n","log_probs looks like  (2871,)\n","logs prob looks like  torch.Size([2871])\n","torch.from_numpy(rewards) looks like  torch.Size([2871])\n","rewards looks like  (1057,)\n","log_probs looks like  (1057,)\n","logs prob looks like  torch.Size([1057])\n","torch.from_numpy(rewards) looks like  torch.Size([1057])\n","rewards looks like  (2198,)\n","log_probs looks like  (2198,)\n","logs prob looks like  torch.Size([2198])\n","torch.from_numpy(rewards) looks like  torch.Size([2198])\n","rewards looks like  (4263,)\n","log_probs looks like  (4263,)\n","logs prob looks like  torch.Size([4263])\n","torch.from_numpy(rewards) looks like  torch.Size([4263])\n","rewards looks like  (3023,)\n","log_probs looks like  (3023,)\n","logs prob looks like  torch.Size([3023])\n","torch.from_numpy(rewards) looks like  torch.Size([3023])\n","rewards looks like  (3124,)\n","log_probs looks like  (3124,)\n","logs prob looks like  torch.Size([3124])\n","torch.from_numpy(rewards) looks like  torch.Size([3124])\n","rewards looks like  (2730,)\n","log_probs looks like  (2730,)\n","logs prob looks like  torch.Size([2730])\n","torch.from_numpy(rewards) looks like  torch.Size([2730])\n","rewards looks like  (3290,)\n","log_probs looks like  (3290,)\n","logs prob looks like  torch.Size([3290])\n","torch.from_numpy(rewards) looks like  torch.Size([3290])\n","rewards looks like  (2947,)\n","log_probs looks like  (2947,)\n","logs prob looks like  torch.Size([2947])\n","torch.from_numpy(rewards) looks like  torch.Size([2947])\n","rewards looks like  (2942,)\n","log_probs looks like  (2942,)\n","logs prob looks like  torch.Size([2942])\n","torch.from_numpy(rewards) looks like  torch.Size([2942])\n","rewards looks like  (2796,)\n","log_probs looks like  (2796,)\n","logs prob looks like  torch.Size([2796])\n","torch.from_numpy(rewards) looks like  torch.Size([2796])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (406,)\n","log_probs looks like  (406,)\n","logs prob looks like  torch.Size([406])\n","torch.from_numpy(rewards) looks like  torch.Size([406])\n","rewards looks like  (404,)\n","log_probs looks like  (404,)\n","logs prob looks like  torch.Size([404])\n","torch.from_numpy(rewards) looks like  torch.Size([404])\n","rewards looks like  (416,)\n","log_probs looks like  (416,)\n","logs prob looks like  torch.Size([416])\n","torch.from_numpy(rewards) looks like  torch.Size([416])\n","rewards looks like  (418,)\n","log_probs looks like  (418,)\n","logs prob looks like  torch.Size([418])\n","torch.from_numpy(rewards) looks like  torch.Size([418])\n","rewards looks like  (355,)\n","log_probs looks like  (355,)\n","logs prob looks like  torch.Size([355])\n","torch.from_numpy(rewards) looks like  torch.Size([355])\n","rewards looks like  (403,)\n","log_probs looks like  (403,)\n","logs prob looks like  torch.Size([403])\n","torch.from_numpy(rewards) looks like  torch.Size([403])\n","rewards looks like  (424,)\n","log_probs looks like  (424,)\n","logs prob looks like  torch.Size([424])\n","torch.from_numpy(rewards) looks like  torch.Size([424])\n","rewards looks like  (386,)\n","log_probs looks like  (386,)\n","logs prob looks like  torch.Size([386])\n","torch.from_numpy(rewards) looks like  torch.Size([386])\n","rewards looks like  (332,)\n","log_probs looks like  (332,)\n","logs prob looks like  torch.Size([332])\n","torch.from_numpy(rewards) looks like  torch.Size([332])\n","rewards looks like  (382,)\n","log_probs looks like  (382,)\n","logs prob looks like  torch.Size([382])\n","torch.from_numpy(rewards) looks like  torch.Size([382])\n","rewards looks like  (393,)\n","log_probs looks like  (393,)\n","logs prob looks like  torch.Size([393])\n","torch.from_numpy(rewards) looks like  torch.Size([393])\n","rewards looks like  (425,)\n","log_probs looks like  (425,)\n","logs prob looks like  torch.Size([425])\n","torch.from_numpy(rewards) looks like  torch.Size([425])\n","rewards looks like  (410,)\n","log_probs looks like  (410,)\n","logs prob looks like  torch.Size([410])\n","torch.from_numpy(rewards) looks like  torch.Size([410])\n","rewards looks like  (451,)\n","log_probs looks like  (451,)\n","logs prob looks like  torch.Size([451])\n","torch.from_numpy(rewards) looks like  torch.Size([451])\n","rewards looks like  (388,)\n","log_probs looks like  (388,)\n","logs prob looks like  torch.Size([388])\n","torch.from_numpy(rewards) looks like  torch.Size([388])\n","rewards looks like  (417,)\n","log_probs looks like  (417,)\n","logs prob looks like  torch.Size([417])\n","torch.from_numpy(rewards) looks like  torch.Size([417])\n","rewards looks like  (461,)\n","log_probs looks like  (461,)\n","logs prob looks like  torch.Size([461])\n","torch.from_numpy(rewards) looks like  torch.Size([461])\n","rewards looks like  (417,)\n","log_probs looks like  (417,)\n","logs prob looks like  torch.Size([417])\n","torch.from_numpy(rewards) looks like  torch.Size([417])\n","rewards looks like  (393,)\n","log_probs looks like  (393,)\n","logs prob looks like  torch.Size([393])\n","torch.from_numpy(rewards) looks like  torch.Size([393])\n","rewards looks like  (439,)\n","log_probs looks like  (439,)\n","logs prob looks like  torch.Size([439])\n","torch.from_numpy(rewards) looks like  torch.Size([439])\n","rewards looks like  (412,)\n","log_probs looks like  (412,)\n","logs prob looks like  torch.Size([412])\n","torch.from_numpy(rewards) looks like  torch.Size([412])\n","rewards looks like  (443,)\n","log_probs looks like  (443,)\n","logs prob looks like  torch.Size([443])\n","torch.from_numpy(rewards) looks like  torch.Size([443])\n","rewards looks like  (442,)\n","log_probs looks like  (442,)\n","logs prob looks like  torch.Size([442])\n","torch.from_numpy(rewards) looks like  torch.Size([442])\n","rewards looks like  (437,)\n","log_probs looks like  (437,)\n","logs prob looks like  torch.Size([437])\n","torch.from_numpy(rewards) looks like  torch.Size([437])\n","rewards looks like  (658,)\n","log_probs looks like  (658,)\n","logs prob looks like  torch.Size([658])\n","torch.from_numpy(rewards) looks like  torch.Size([658])\n","rewards looks like  (418,)\n","log_probs looks like  (418,)\n","logs prob looks like  torch.Size([418])\n","torch.from_numpy(rewards) looks like  torch.Size([418])\n","rewards looks like  (401,)\n","log_probs looks like  (401,)\n","logs prob looks like  torch.Size([401])\n","torch.from_numpy(rewards) looks like  torch.Size([401])\n","rewards looks like  (420,)\n","log_probs looks like  (420,)\n","logs prob looks like  torch.Size([420])\n","torch.from_numpy(rewards) looks like  torch.Size([420])\n","rewards looks like  (470,)\n","log_probs looks like  (470,)\n","logs prob looks like  torch.Size([470])\n","torch.from_numpy(rewards) looks like  torch.Size([470])\n","rewards looks like  (468,)\n","log_probs looks like  (468,)\n","logs prob looks like  torch.Size([468])\n","torch.from_numpy(rewards) looks like  torch.Size([468])\n","rewards looks like  (615,)\n","log_probs looks like  (615,)\n","logs prob looks like  torch.Size([615])\n","torch.from_numpy(rewards) looks like  torch.Size([615])\n","rewards looks like  (505,)\n","log_probs looks like  (505,)\n","logs prob looks like  torch.Size([505])\n","torch.from_numpy(rewards) looks like  torch.Size([505])\n","rewards looks like  (664,)\n","log_probs looks like  (664,)\n","logs prob looks like  torch.Size([664])\n","torch.from_numpy(rewards) looks like  torch.Size([664])\n","rewards looks like  (442,)\n","log_probs looks like  (442,)\n","logs prob looks like  torch.Size([442])\n","torch.from_numpy(rewards) looks like  torch.Size([442])\n","rewards looks like  (764,)\n","log_probs looks like  (764,)\n","logs prob looks like  torch.Size([764])\n","torch.from_numpy(rewards) looks like  torch.Size([764])\n","rewards looks like  (482,)\n","log_probs looks like  (482,)\n","logs prob looks like  torch.Size([482])\n","torch.from_numpy(rewards) looks like  torch.Size([482])\n","rewards looks like  (538,)\n","log_probs looks like  (538,)\n","logs prob looks like  torch.Size([538])\n","torch.from_numpy(rewards) looks like  torch.Size([538])\n","rewards looks like  (463,)\n","log_probs looks like  (463,)\n","logs prob looks like  torch.Size([463])\n","torch.from_numpy(rewards) looks like  torch.Size([463])\n","rewards looks like  (862,)\n","log_probs looks like  (862,)\n","logs prob looks like  torch.Size([862])\n","torch.from_numpy(rewards) looks like  torch.Size([862])\n","rewards looks like  (720,)\n","log_probs looks like  (720,)\n","logs prob looks like  torch.Size([720])\n","torch.from_numpy(rewards) looks like  torch.Size([720])\n","rewards looks like  (2294,)\n","log_probs looks like  (2294,)\n","logs prob looks like  torch.Size([2294])\n","torch.from_numpy(rewards) looks like  torch.Size([2294])\n","rewards looks like  (574,)\n","log_probs looks like  (574,)\n","logs prob looks like  torch.Size([574])\n","torch.from_numpy(rewards) looks like  torch.Size([574])\n","rewards looks like  (1944,)\n","log_probs looks like  (1944,)\n","logs prob looks like  torch.Size([1944])\n","torch.from_numpy(rewards) looks like  torch.Size([1944])\n","rewards looks like  (1385,)\n","log_probs looks like  (1385,)\n","logs prob looks like  torch.Size([1385])\n","torch.from_numpy(rewards) looks like  torch.Size([1385])\n","rewards looks like  (1991,)\n","log_probs looks like  (1991,)\n","logs prob looks like  torch.Size([1991])\n","torch.from_numpy(rewards) looks like  torch.Size([1991])\n","rewards looks like  (1725,)\n","log_probs looks like  (1725,)\n","logs prob looks like  torch.Size([1725])\n","torch.from_numpy(rewards) looks like  torch.Size([1725])\n","rewards looks like  (931,)\n","log_probs looks like  (931,)\n","logs prob looks like  torch.Size([931])\n","torch.from_numpy(rewards) looks like  torch.Size([931])\n","rewards looks like  (1316,)\n","log_probs looks like  (1316,)\n","logs prob looks like  torch.Size([1316])\n","torch.from_numpy(rewards) looks like  torch.Size([1316])\n","rewards looks like  (2171,)\n","log_probs looks like  (2171,)\n","logs prob looks like  torch.Size([2171])\n","torch.from_numpy(rewards) looks like  torch.Size([2171])\n","rewards looks like  (1047,)\n","log_probs looks like  (1047,)\n","logs prob looks like  torch.Size([1047])\n","torch.from_numpy(rewards) looks like  torch.Size([1047])\n","rewards looks like  (1135,)\n","log_probs looks like  (1135,)\n","logs prob looks like  torch.Size([1135])\n","torch.from_numpy(rewards) looks like  torch.Size([1135])\n","rewards looks like  (1053,)\n","log_probs looks like  (1053,)\n","logs prob looks like  torch.Size([1053])\n","torch.from_numpy(rewards) looks like  torch.Size([1053])\n","rewards looks like  (1005,)\n","log_probs looks like  (1005,)\n","logs prob looks like  torch.Size([1005])\n","torch.from_numpy(rewards) looks like  torch.Size([1005])\n","rewards looks like  (902,)\n","log_probs looks like  (902,)\n","logs prob looks like  torch.Size([902])\n","torch.from_numpy(rewards) looks like  torch.Size([902])\n","rewards looks like  (1469,)\n","log_probs looks like  (1469,)\n","logs prob looks like  torch.Size([1469])\n","torch.from_numpy(rewards) looks like  torch.Size([1469])\n","rewards looks like  (2463,)\n","log_probs looks like  (2463,)\n","logs prob looks like  torch.Size([2463])\n","torch.from_numpy(rewards) looks like  torch.Size([2463])\n","rewards looks like  (2581,)\n","log_probs looks like  (2581,)\n","logs prob looks like  torch.Size([2581])\n","torch.from_numpy(rewards) looks like  torch.Size([2581])\n","rewards looks like  (1561,)\n","log_probs looks like  (1561,)\n","logs prob looks like  torch.Size([1561])\n","torch.from_numpy(rewards) looks like  torch.Size([1561])\n","rewards looks like  (1648,)\n","log_probs looks like  (1648,)\n","logs prob looks like  torch.Size([1648])\n","torch.from_numpy(rewards) looks like  torch.Size([1648])\n","rewards looks like  (2128,)\n","log_probs looks like  (2128,)\n","logs prob looks like  torch.Size([2128])\n","torch.from_numpy(rewards) looks like  torch.Size([2128])\n","rewards looks like  (1447,)\n","log_probs looks like  (1447,)\n","logs prob looks like  torch.Size([1447])\n","torch.from_numpy(rewards) looks like  torch.Size([1447])\n","rewards looks like  (1949,)\n","log_probs looks like  (1949,)\n","logs prob looks like  torch.Size([1949])\n","torch.from_numpy(rewards) looks like  torch.Size([1949])\n","rewards looks like  (2670,)\n","log_probs looks like  (2670,)\n","logs prob looks like  torch.Size([2670])\n","torch.from_numpy(rewards) looks like  torch.Size([2670])\n","rewards looks like  (1664,)\n","log_probs looks like  (1664,)\n","logs prob looks like  torch.Size([1664])\n","torch.from_numpy(rewards) looks like  torch.Size([1664])\n","rewards looks like  (2822,)\n","log_probs looks like  (2822,)\n","logs prob looks like  torch.Size([2822])\n","torch.from_numpy(rewards) looks like  torch.Size([2822])\n","rewards looks like  (1639,)\n","log_probs looks like  (1639,)\n","logs prob looks like  torch.Size([1639])\n","torch.from_numpy(rewards) looks like  torch.Size([1639])\n","rewards looks like  (1109,)\n","log_probs looks like  (1109,)\n","logs prob looks like  torch.Size([1109])\n","torch.from_numpy(rewards) looks like  torch.Size([1109])\n","rewards looks like  (2727,)\n","log_probs looks like  (2727,)\n","logs prob looks like  torch.Size([2727])\n","torch.from_numpy(rewards) looks like  torch.Size([2727])\n","rewards looks like  (2611,)\n","log_probs looks like  (2611,)\n","logs prob looks like  torch.Size([2611])\n","torch.from_numpy(rewards) looks like  torch.Size([2611])\n","rewards looks like  (3941,)\n","log_probs looks like  (3941,)\n","logs prob looks like  torch.Size([3941])\n","torch.from_numpy(rewards) looks like  torch.Size([3941])\n","rewards looks like  (883,)\n","log_probs looks like  (883,)\n","logs prob looks like  torch.Size([883])\n","torch.from_numpy(rewards) looks like  torch.Size([883])\n","rewards looks like  (1474,)\n","log_probs looks like  (1474,)\n","logs prob looks like  torch.Size([1474])\n","torch.from_numpy(rewards) looks like  torch.Size([1474])\n","rewards looks like  (1912,)\n","log_probs looks like  (1912,)\n","logs prob looks like  torch.Size([1912])\n","torch.from_numpy(rewards) looks like  torch.Size([1912])\n","rewards looks like  (1366,)\n","log_probs looks like  (1366,)\n","logs prob looks like  torch.Size([1366])\n","torch.from_numpy(rewards) looks like  torch.Size([1366])\n","rewards looks like  (1782,)\n","log_probs looks like  (1782,)\n","logs prob looks like  torch.Size([1782])\n","torch.from_numpy(rewards) looks like  torch.Size([1782])\n","rewards looks like  (826,)\n","log_probs looks like  (826,)\n","logs prob looks like  torch.Size([826])\n","torch.from_numpy(rewards) looks like  torch.Size([826])\n","rewards looks like  (912,)\n","log_probs looks like  (912,)\n","logs prob looks like  torch.Size([912])\n","torch.from_numpy(rewards) looks like  torch.Size([912])\n","rewards looks like  (1370,)\n","log_probs looks like  (1370,)\n","logs prob looks like  torch.Size([1370])\n","torch.from_numpy(rewards) looks like  torch.Size([1370])\n","rewards looks like  (1960,)\n","log_probs looks like  (1960,)\n","logs prob looks like  torch.Size([1960])\n","torch.from_numpy(rewards) looks like  torch.Size([1960])\n","rewards looks like  (3486,)\n","log_probs looks like  (3486,)\n","logs prob looks like  torch.Size([3486])\n","torch.from_numpy(rewards) looks like  torch.Size([3486])\n","rewards looks like  (1457,)\n","log_probs looks like  (1457,)\n","logs prob looks like  torch.Size([1457])\n","torch.from_numpy(rewards) looks like  torch.Size([1457])\n","rewards looks like  (2385,)\n","log_probs looks like  (2385,)\n","logs prob looks like  torch.Size([2385])\n","torch.from_numpy(rewards) looks like  torch.Size([2385])\n","rewards looks like  (1537,)\n","log_probs looks like  (1537,)\n","logs prob looks like  torch.Size([1537])\n","torch.from_numpy(rewards) looks like  torch.Size([1537])\n","rewards looks like  (2111,)\n","log_probs looks like  (2111,)\n","logs prob looks like  torch.Size([2111])\n","torch.from_numpy(rewards) looks like  torch.Size([2111])\n","rewards looks like  (493,)\n","log_probs looks like  (493,)\n","logs prob looks like  torch.Size([493])\n","torch.from_numpy(rewards) looks like  torch.Size([493])\n","rewards looks like  (2143,)\n","log_probs looks like  (2143,)\n","logs prob looks like  torch.Size([2143])\n","torch.from_numpy(rewards) looks like  torch.Size([2143])\n","rewards looks like  (1553,)\n","log_probs looks like  (1553,)\n","logs prob looks like  torch.Size([1553])\n","torch.from_numpy(rewards) looks like  torch.Size([1553])\n","rewards looks like  (3121,)\n","log_probs looks like  (3121,)\n","logs prob looks like  torch.Size([3121])\n","torch.from_numpy(rewards) looks like  torch.Size([3121])\n","rewards looks like  (1234,)\n","log_probs looks like  (1234,)\n","logs prob looks like  torch.Size([1234])\n","torch.from_numpy(rewards) looks like  torch.Size([1234])\n","rewards looks like  (1516,)\n","log_probs looks like  (1516,)\n","logs prob looks like  torch.Size([1516])\n","torch.from_numpy(rewards) looks like  torch.Size([1516])\n","rewards looks like  (1913,)\n","log_probs looks like  (1913,)\n","logs prob looks like  torch.Size([1913])\n","torch.from_numpy(rewards) looks like  torch.Size([1913])\n","rewards looks like  (1988,)\n","log_probs looks like  (1988,)\n","logs prob looks like  torch.Size([1988])\n","torch.from_numpy(rewards) looks like  torch.Size([1988])\n","rewards looks like  (3747,)\n","log_probs looks like  (3747,)\n","logs prob looks like  torch.Size([3747])\n","torch.from_numpy(rewards) looks like  torch.Size([3747])\n","rewards looks like  (1658,)\n","log_probs looks like  (1658,)\n","logs prob looks like  torch.Size([1658])\n","torch.from_numpy(rewards) looks like  torch.Size([1658])\n","rewards looks like  (802,)\n","log_probs looks like  (802,)\n","logs prob looks like  torch.Size([802])\n","torch.from_numpy(rewards) looks like  torch.Size([802])\n","rewards looks like  (2530,)\n","log_probs looks like  (2530,)\n","logs prob looks like  torch.Size([2530])\n","torch.from_numpy(rewards) looks like  torch.Size([2530])\n","rewards looks like  (3489,)\n","log_probs looks like  (3489,)\n","logs prob looks like  torch.Size([3489])\n","torch.from_numpy(rewards) looks like  torch.Size([3489])\n","rewards looks like  (2488,)\n","log_probs looks like  (2488,)\n","logs prob looks like  torch.Size([2488])\n","torch.from_numpy(rewards) looks like  torch.Size([2488])\n","rewards looks like  (3188,)\n","log_probs looks like  (3188,)\n","logs prob looks like  torch.Size([3188])\n","torch.from_numpy(rewards) looks like  torch.Size([3188])\n","rewards looks like  (1565,)\n","log_probs looks like  (1565,)\n","logs prob looks like  torch.Size([1565])\n","torch.from_numpy(rewards) looks like  torch.Size([1565])\n","rewards looks like  (1912,)\n","log_probs looks like  (1912,)\n","logs prob looks like  torch.Size([1912])\n","torch.from_numpy(rewards) looks like  torch.Size([1912])\n","rewards looks like  (4142,)\n","log_probs looks like  (4142,)\n","logs prob looks like  torch.Size([4142])\n","torch.from_numpy(rewards) looks like  torch.Size([4142])\n","rewards looks like  (2618,)\n","log_probs looks like  (2618,)\n","logs prob looks like  torch.Size([2618])\n","torch.from_numpy(rewards) looks like  torch.Size([2618])\n","rewards looks like  (2865,)\n","log_probs looks like  (2865,)\n","logs prob looks like  torch.Size([2865])\n","torch.from_numpy(rewards) looks like  torch.Size([2865])\n","rewards looks like  (2981,)\n","log_probs looks like  (2981,)\n","logs prob looks like  torch.Size([2981])\n","torch.from_numpy(rewards) looks like  torch.Size([2981])\n","rewards looks like  (4605,)\n","log_probs looks like  (4605,)\n","logs prob looks like  torch.Size([4605])\n","torch.from_numpy(rewards) looks like  torch.Size([4605])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (4452,)\n","log_probs looks like  (4452,)\n","logs prob looks like  torch.Size([4452])\n","torch.from_numpy(rewards) looks like  torch.Size([4452])\n","rewards looks like  (906,)\n","log_probs looks like  (906,)\n","logs prob looks like  torch.Size([906])\n","torch.from_numpy(rewards) looks like  torch.Size([906])\n","rewards looks like  (1028,)\n","log_probs looks like  (1028,)\n","logs prob looks like  torch.Size([1028])\n","torch.from_numpy(rewards) looks like  torch.Size([1028])\n","rewards looks like  (2285,)\n","log_probs looks like  (2285,)\n","logs prob looks like  torch.Size([2285])\n","torch.from_numpy(rewards) looks like  torch.Size([2285])\n","rewards looks like  (1525,)\n","log_probs looks like  (1525,)\n","logs prob looks like  torch.Size([1525])\n","torch.from_numpy(rewards) looks like  torch.Size([1525])\n","rewards looks like  (1602,)\n","log_probs looks like  (1602,)\n","logs prob looks like  torch.Size([1602])\n","torch.from_numpy(rewards) looks like  torch.Size([1602])\n","rewards looks like  (1180,)\n","log_probs looks like  (1180,)\n","logs prob looks like  torch.Size([1180])\n","torch.from_numpy(rewards) looks like  torch.Size([1180])\n","rewards looks like  (1641,)\n","log_probs looks like  (1641,)\n","logs prob looks like  torch.Size([1641])\n","torch.from_numpy(rewards) looks like  torch.Size([1641])\n","rewards looks like  (4184,)\n","log_probs looks like  (4184,)\n","logs prob looks like  torch.Size([4184])\n","torch.from_numpy(rewards) looks like  torch.Size([4184])\n","rewards looks like  (3543,)\n","log_probs looks like  (3543,)\n","logs prob looks like  torch.Size([3543])\n","torch.from_numpy(rewards) looks like  torch.Size([3543])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (4183,)\n","log_probs looks like  (4183,)\n","logs prob looks like  torch.Size([4183])\n","torch.from_numpy(rewards) looks like  torch.Size([4183])\n","rewards looks like  (3642,)\n","log_probs looks like  (3642,)\n","logs prob looks like  torch.Size([3642])\n","torch.from_numpy(rewards) looks like  torch.Size([3642])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (4566,)\n","log_probs looks like  (4566,)\n","logs prob looks like  torch.Size([4566])\n","torch.from_numpy(rewards) looks like  torch.Size([4566])\n","rewards looks like  (2956,)\n","log_probs looks like  (2956,)\n","logs prob looks like  torch.Size([2956])\n","torch.from_numpy(rewards) looks like  torch.Size([2956])\n","rewards looks like  (4038,)\n","log_probs looks like  (4038,)\n","logs prob looks like  torch.Size([4038])\n","torch.from_numpy(rewards) looks like  torch.Size([4038])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (3485,)\n","log_probs looks like  (3485,)\n","logs prob looks like  torch.Size([3485])\n","torch.from_numpy(rewards) looks like  torch.Size([3485])\n","rewards looks like  (2431,)\n","log_probs looks like  (2431,)\n","logs prob looks like  torch.Size([2431])\n","torch.from_numpy(rewards) looks like  torch.Size([2431])\n","rewards looks like  (3793,)\n","log_probs looks like  (3793,)\n","logs prob looks like  torch.Size([3793])\n","torch.from_numpy(rewards) looks like  torch.Size([3793])\n","rewards looks like  (3307,)\n","log_probs looks like  (3307,)\n","logs prob looks like  torch.Size([3307])\n","torch.from_numpy(rewards) looks like  torch.Size([3307])\n","rewards looks like  (1720,)\n","log_probs looks like  (1720,)\n","logs prob looks like  torch.Size([1720])\n","torch.from_numpy(rewards) looks like  torch.Size([1720])\n","rewards looks like  (2585,)\n","log_probs looks like  (2585,)\n","logs prob looks like  torch.Size([2585])\n","torch.from_numpy(rewards) looks like  torch.Size([2585])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (1072,)\n","log_probs looks like  (1072,)\n","logs prob looks like  torch.Size([1072])\n","torch.from_numpy(rewards) looks like  torch.Size([1072])\n","rewards looks like  (2043,)\n","log_probs looks like  (2043,)\n","logs prob looks like  torch.Size([2043])\n","torch.from_numpy(rewards) looks like  torch.Size([2043])\n","rewards looks like  (3587,)\n","log_probs looks like  (3587,)\n","logs prob looks like  torch.Size([3587])\n","torch.from_numpy(rewards) looks like  torch.Size([3587])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (2778,)\n","log_probs looks like  (2778,)\n","logs prob looks like  torch.Size([2778])\n","torch.from_numpy(rewards) looks like  torch.Size([2778])\n","rewards looks like  (2137,)\n","log_probs looks like  (2137,)\n","logs prob looks like  torch.Size([2137])\n","torch.from_numpy(rewards) looks like  torch.Size([2137])\n","rewards looks like  (2470,)\n","log_probs looks like  (2470,)\n","logs prob looks like  torch.Size([2470])\n","torch.from_numpy(rewards) looks like  torch.Size([2470])\n","rewards looks like  (3602,)\n","log_probs looks like  (3602,)\n","logs prob looks like  torch.Size([3602])\n","torch.from_numpy(rewards) looks like  torch.Size([3602])\n","rewards looks like  (1941,)\n","log_probs looks like  (1941,)\n","logs prob looks like  torch.Size([1941])\n","torch.from_numpy(rewards) looks like  torch.Size([1941])\n","rewards looks like  (1887,)\n","log_probs looks like  (1887,)\n","logs prob looks like  torch.Size([1887])\n","torch.from_numpy(rewards) looks like  torch.Size([1887])\n","rewards looks like  (3110,)\n","log_probs looks like  (3110,)\n","logs prob looks like  torch.Size([3110])\n","torch.from_numpy(rewards) looks like  torch.Size([3110])\n","rewards looks like  (2306,)\n","log_probs looks like  (2306,)\n","logs prob looks like  torch.Size([2306])\n","torch.from_numpy(rewards) looks like  torch.Size([2306])\n","rewards looks like  (4164,)\n","log_probs looks like  (4164,)\n","logs prob looks like  torch.Size([4164])\n","torch.from_numpy(rewards) looks like  torch.Size([4164])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (3624,)\n","log_probs looks like  (3624,)\n","logs prob looks like  torch.Size([3624])\n","torch.from_numpy(rewards) looks like  torch.Size([3624])\n","rewards looks like  (3961,)\n","log_probs looks like  (3961,)\n","logs prob looks like  torch.Size([3961])\n","torch.from_numpy(rewards) looks like  torch.Size([3961])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (1207,)\n","log_probs looks like  (1207,)\n","logs prob looks like  torch.Size([1207])\n","torch.from_numpy(rewards) looks like  torch.Size([1207])\n","rewards looks like  (2789,)\n","log_probs looks like  (2789,)\n","logs prob looks like  torch.Size([2789])\n","torch.from_numpy(rewards) looks like  torch.Size([2789])\n","rewards looks like  (3202,)\n","log_probs looks like  (3202,)\n","logs prob looks like  torch.Size([3202])\n","torch.from_numpy(rewards) looks like  torch.Size([3202])\n","rewards looks like  (2204,)\n","log_probs looks like  (2204,)\n","logs prob looks like  torch.Size([2204])\n","torch.from_numpy(rewards) looks like  torch.Size([2204])\n","rewards looks like  (3281,)\n","log_probs looks like  (3281,)\n","logs prob looks like  torch.Size([3281])\n","torch.from_numpy(rewards) looks like  torch.Size([3281])\n","rewards looks like  (669,)\n","log_probs looks like  (669,)\n","logs prob looks like  torch.Size([669])\n","torch.from_numpy(rewards) looks like  torch.Size([669])\n","rewards looks like  (710,)\n","log_probs looks like  (710,)\n","logs prob looks like  torch.Size([710])\n","torch.from_numpy(rewards) looks like  torch.Size([710])\n","rewards looks like  (568,)\n","log_probs looks like  (568,)\n","logs prob looks like  torch.Size([568])\n","torch.from_numpy(rewards) looks like  torch.Size([568])\n","rewards looks like  (718,)\n","log_probs looks like  (718,)\n","logs prob looks like  torch.Size([718])\n","torch.from_numpy(rewards) looks like  torch.Size([718])\n","rewards looks like  (759,)\n","log_probs looks like  (759,)\n","logs prob looks like  torch.Size([759])\n","torch.from_numpy(rewards) looks like  torch.Size([759])\n","rewards looks like  (1703,)\n","log_probs looks like  (1703,)\n","logs prob looks like  torch.Size([1703])\n","torch.from_numpy(rewards) looks like  torch.Size([1703])\n","rewards looks like  (638,)\n","log_probs looks like  (638,)\n","logs prob looks like  torch.Size([638])\n","torch.from_numpy(rewards) looks like  torch.Size([638])\n","rewards looks like  (1571,)\n","log_probs looks like  (1571,)\n","logs prob looks like  torch.Size([1571])\n","torch.from_numpy(rewards) looks like  torch.Size([1571])\n","rewards looks like  (1434,)\n","log_probs looks like  (1434,)\n","logs prob looks like  torch.Size([1434])\n","torch.from_numpy(rewards) looks like  torch.Size([1434])\n","rewards looks like  (1830,)\n","log_probs looks like  (1830,)\n","logs prob looks like  torch.Size([1830])\n","torch.from_numpy(rewards) looks like  torch.Size([1830])\n","rewards looks like  (1813,)\n","log_probs looks like  (1813,)\n","logs prob looks like  torch.Size([1813])\n","torch.from_numpy(rewards) looks like  torch.Size([1813])\n","rewards looks like  (2148,)\n","log_probs looks like  (2148,)\n","logs prob looks like  torch.Size([2148])\n","torch.from_numpy(rewards) looks like  torch.Size([2148])\n","rewards looks like  (2115,)\n","log_probs looks like  (2115,)\n","logs prob looks like  torch.Size([2115])\n","torch.from_numpy(rewards) looks like  torch.Size([2115])\n","rewards looks like  (2101,)\n","log_probs looks like  (2101,)\n","logs prob looks like  torch.Size([2101])\n","torch.from_numpy(rewards) looks like  torch.Size([2101])\n","rewards looks like  (688,)\n","log_probs looks like  (688,)\n","logs prob looks like  torch.Size([688])\n","torch.from_numpy(rewards) looks like  torch.Size([688])\n","rewards looks like  (711,)\n","log_probs looks like  (711,)\n","logs prob looks like  torch.Size([711])\n","torch.from_numpy(rewards) looks like  torch.Size([711])\n","rewards looks like  (1855,)\n","log_probs looks like  (1855,)\n","logs prob looks like  torch.Size([1855])\n","torch.from_numpy(rewards) looks like  torch.Size([1855])\n","rewards looks like  (1017,)\n","log_probs looks like  (1017,)\n","logs prob looks like  torch.Size([1017])\n","torch.from_numpy(rewards) looks like  torch.Size([1017])\n","rewards looks like  (3451,)\n","log_probs looks like  (3451,)\n","logs prob looks like  torch.Size([3451])\n","torch.from_numpy(rewards) looks like  torch.Size([3451])\n","rewards looks like  (3198,)\n","log_probs looks like  (3198,)\n","logs prob looks like  torch.Size([3198])\n","torch.from_numpy(rewards) looks like  torch.Size([3198])\n","rewards looks like  (2757,)\n","log_probs looks like  (2757,)\n","logs prob looks like  torch.Size([2757])\n","torch.from_numpy(rewards) looks like  torch.Size([2757])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (5000,)\n","log_probs looks like  (5000,)\n","logs prob looks like  torch.Size([5000])\n","torch.from_numpy(rewards) looks like  torch.Size([5000])\n","rewards looks like  (3253,)\n","log_probs looks like  (3253,)\n","logs prob looks like  torch.Size([3253])\n","torch.from_numpy(rewards) looks like  torch.Size([3253])\n","rewards looks like  (2611,)\n","log_probs looks like  (2611,)\n","logs prob looks like  torch.Size([2611])\n","torch.from_numpy(rewards) looks like  torch.Size([2611])\n","rewards looks like  (1697,)\n","log_probs looks like  (1697,)\n","logs prob looks like  torch.Size([1697])\n","torch.from_numpy(rewards) looks like  torch.Size([1697])\n","rewards looks like  (1129,)\n","log_probs looks like  (1129,)\n","logs prob looks like  torch.Size([1129])\n","torch.from_numpy(rewards) looks like  torch.Size([1129])\n","rewards looks like  (3230,)\n","log_probs looks like  (3230,)\n","logs prob looks like  torch.Size([3230])\n","torch.from_numpy(rewards) looks like  torch.Size([3230])\n","rewards looks like  (3356,)\n","log_probs looks like  (3356,)\n","logs prob looks like  torch.Size([3356])\n","torch.from_numpy(rewards) looks like  torch.Size([3356])\n","rewards looks like  (2172,)\n","log_probs looks like  (2172,)\n","logs prob looks like  torch.Size([2172])\n","torch.from_numpy(rewards) looks like  torch.Size([2172])\n","rewards looks like  (1954,)\n","log_probs looks like  (1954,)\n","logs prob looks like  torch.Size([1954])\n","torch.from_numpy(rewards) looks like  torch.Size([1954])\n","rewards looks like  (2876,)\n","log_probs looks like  (2876,)\n","logs prob looks like  torch.Size([2876])\n","torch.from_numpy(rewards) looks like  torch.Size([2876])\n","rewards looks like  (760,)\n","log_probs looks like  (760,)\n","logs prob looks like  torch.Size([760])\n","torch.from_numpy(rewards) looks like  torch.Size([760])\n","rewards looks like  (1560,)\n","log_probs looks like  (1560,)\n","logs prob looks like  torch.Size([1560])\n","torch.from_numpy(rewards) looks like  torch.Size([1560])\n","rewards looks like  (716,)\n","log_probs looks like  (716,)\n","logs prob looks like  torch.Size([716])\n","torch.from_numpy(rewards) looks like  torch.Size([716])\n","rewards looks like  (1832,)\n","log_probs looks like  (1832,)\n","logs prob looks like  torch.Size([1832])\n","torch.from_numpy(rewards) looks like  torch.Size([1832])\n","rewards looks like  (3543,)\n","log_probs looks like  (3543,)\n","logs prob looks like  torch.Size([3543])\n","torch.from_numpy(rewards) looks like  torch.Size([3543])\n","rewards looks like  (1759,)\n","log_probs looks like  (1759,)\n","logs prob looks like  torch.Size([1759])\n","torch.from_numpy(rewards) looks like  torch.Size([1759])\n","rewards looks like  (1850,)\n","log_probs looks like  (1850,)\n","logs prob looks like  torch.Size([1850])\n","torch.from_numpy(rewards) looks like  torch.Size([1850])\n","rewards looks like  (2012,)\n","log_probs looks like  (2012,)\n","logs prob looks like  torch.Size([2012])\n","torch.from_numpy(rewards) looks like  torch.Size([2012])\n","rewards looks like  (2911,)\n","log_probs looks like  (2911,)\n","logs prob looks like  torch.Size([2911])\n","torch.from_numpy(rewards) looks like  torch.Size([2911])\n","rewards looks like  (1536,)\n","log_probs looks like  (1536,)\n","logs prob looks like  torch.Size([1536])\n","torch.from_numpy(rewards) looks like  torch.Size([1536])\n","rewards looks like  (1780,)\n","log_probs looks like  (1780,)\n","logs prob looks like  torch.Size([1780])\n","torch.from_numpy(rewards) looks like  torch.Size([1780])\n","rewards looks like  (4251,)\n","log_probs looks like  (4251,)\n","logs prob looks like  torch.Size([4251])\n","torch.from_numpy(rewards) looks like  torch.Size([4251])\n","rewards looks like  (1609,)\n","log_probs looks like  (1609,)\n","logs prob looks like  torch.Size([1609])\n","torch.from_numpy(rewards) looks like  torch.Size([1609])\n","rewards looks like  (3294,)\n","log_probs looks like  (3294,)\n","logs prob looks like  torch.Size([3294])\n","torch.from_numpy(rewards) looks like  torch.Size([3294])\n","rewards looks like  (1144,)\n","log_probs looks like  (1144,)\n","logs prob looks like  torch.Size([1144])\n","torch.from_numpy(rewards) looks like  torch.Size([1144])\n","rewards looks like  (1994,)\n","log_probs looks like  (1994,)\n","logs prob looks like  torch.Size([1994])\n","torch.from_numpy(rewards) looks like  torch.Size([1994])\n","rewards looks like  (2678,)\n","log_probs looks like  (2678,)\n","logs prob looks like  torch.Size([2678])\n","torch.from_numpy(rewards) looks like  torch.Size([2678])\n","rewards looks like  (2859,)\n","log_probs looks like  (2859,)\n","logs prob looks like  torch.Size([2859])\n","torch.from_numpy(rewards) looks like  torch.Size([2859])\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"vNb_tuFYhKVK"},"source":["### 訓練結果\n","\n","訓練過程中，我們持續記下了 `avg_total_reward`，這個數值代表的是：每次更新 policy network 前，我們讓 agent 玩數個回合（episodes），而這些回合的平均 total rewards 為何。\n","理論上，若是 agent 一直在進步，則所得到的 `avg_total_reward` 也會持續上升，直至 250 上下。\n","若將其畫出來則結果如下："]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"wZYOI8H10SHN","executionInfo":{"status":"ok","timestamp":1623347344608,"user_tz":-480,"elapsed":983,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"1818cf4a-7736-464a-9c11-2c4238e6a0ed"},"source":["end = time.time()\n","plt.plot(avg_total_rewards)\n","plt.title(\"Total Rewards\")\n","plt.show()"],"execution_count":281,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"mV5jj4dThz0Y"},"source":["另外，`avg_final_reward` 代表的是多個回合的平均 final rewards，而 final reward 即是 agent 在單一回合中拿到的最後一個 reward。\n","如果同學們還記得環境給予登月小艇 reward 的方式，便會知道，不論**回合的最後**小艇是不幸墜毀、飛出畫面、或是靜止在地面上，都會受到額外地獎勵或處罰。\n","也因此，final reward 可被用來觀察 agent 的「著地」是否順利等資訊。"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"txDZ5vlGWz5w","executionInfo":{"status":"ok","timestamp":1623347344609,"user_tz":-480,"elapsed":17,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"7e8db320-01d7-438a-96c9-2396328f9b93"},"source":["plt.plot(avg_final_rewards)\n","plt.title(\"Final Rewards\")\n","plt.show()\n"],"execution_count":282,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"gyT7tNwkVdS-"},"source":["訓練時間\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_t-JsKxUViFy","executionInfo":{"status":"ok","timestamp":1623347344610,"user_tz":-480,"elapsed":16,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"03793af4-8c77-47ab-a3a7-859451bc0f80"},"source":["print(f\"total time is {end-start} sec\")"],"execution_count":283,"outputs":[{"output_type":"stream","text":["total time is 1359.733493566513 sec\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"u2HaGRVEYGQS"},"source":["## 測試"]},{"cell_type":"code","metadata":{"id":"5yFuUKKRYH73","colab":{"base_uri":"https://localhost:8080/","height":497},"executionInfo":{"status":"ok","timestamp":1623347349996,"user_tz":-480,"elapsed":5397,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"f2b2640b-7c9a-4fa2-aa9c-e0b589d435fc"},"source":["fix(env, seed)\n","agent.network.eval()  # 測試前先將 network 切換為 evaluation 模式\n","NUM_OF_TEST = 5 # Do not revise it !!!!!\n","test_total_reward = []\n","action_list = []\n","for i in range(NUM_OF_TEST):\n","  actions = []\n","  state = env.reset()\n","\n","  img = plt.imshow(env.render(mode='rgb_array'))\n","\n","  total_reward = 0\n","\n","  done = False\n","  while not done:\n","      action, _ = agent.sample(state)\n","      actions.append(action)\n","      state, reward, done, _ = env.step(action)\n","\n","      total_reward += reward\n","\n","      #img.set_data(env.render(mode='rgb_array'))\n","      #display.display(plt.gcf())\n","      #display.clear_output(wait=True)\n","  print(total_reward)\n","  test_total_reward.append(total_reward)\n","\n","  action_list.append(actions) #儲存你測試的結果\n","  print(\"length of actions is \", len(actions))"],"execution_count":284,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/torch/__init__.py:422: UserWarning: torch.set_deterministic is deprecated and will be removed in a future release. Please use torch.use_deterministic_algorithms instead\n","  \"torch.set_deterministic is deprecated and will be removed in a future \"\n"],"name":"stderr"},{"output_type":"stream","text":["120.7824438270399\n","length of actions is  1000\n","142.91576853055932\n","length of actions is  1000\n","126.11411349413987\n","length of actions is  1000\n","-2.7056213358079617\n","length of actions is  134\n","249.0341698939147\n","length of actions is  273\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Aex7mcKr0J01","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623347349997,"user_tz":-480,"elapsed":30,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"02851a6a-6251-4b63-d531-34889f8395be"},"source":["print(f\"Your final reward is : %.2f\"%np.mean(test_total_reward))"],"execution_count":285,"outputs":[{"output_type":"stream","text":["Your final reward is : 127.23\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"leyebGYRpqsF"},"source":["Action list 的長相"]},{"cell_type":"code","metadata":{"id":"hGAH4YWDpp4u","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623347349997,"user_tz":-480,"elapsed":22,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"275cf49f-ecd8-499e-aada-6547ec79da5a"},"source":["print(\"Action list looks like \", action_list)\n","print(\"Action list's shape looks like \", np.shape(action_list))"],"execution_count":286,"outputs":[{"output_type":"stream","text":["Action list looks like  [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 3, 2, 3, 3, 2, 3, 2, 3, 2, 2, 3, 3, 2, 2, 3, 2, 3, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 3, 3, 2, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 0, 1, 3, 3, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 1, 3, 3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 1, 0, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 1, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 3, 1, 1, 3, 3, 3, 3, 3, 1, 3, 3, 3, 0, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 1, 3, 3, 3, 3, 3, 3, 0, 1, 0, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 1, 0, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 0, 1, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 2, 1, 0, 3, 1, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 1, 3, 1, 1, 1, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 0, 3, 3, 3, 1, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 1, 1, 0, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 0, 3, 3, 3, 1, 3, 3, 1, 3, 3, 3, 1, 1, 0, 3, 3, 1, 3, 1, 3, 3, 3, 3, 0, 3, 3, 1, 0, 3, 1, 3, 3, 3, 1, 3, 3, 3, 3, 0, 1, 1, 3, 1, 1, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 1, 0, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 1, 1, 3, 3, 3, 1, 1, 3, 1, 3, 1, 3, 3, 3, 1, 3, 3, 3, 1, 1, 3, 1, 3, 0, 1, 3, 3, 3, 3, 3, 1, 3, 1, 1, 0, 1, 3, 1, 3, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 3, 1, 3, 1, 3, 3, 3, 1, 3, 0, 1, 1, 1, 3, 3, 3, 0, 3, 3, 3, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 1, 0, 3, 1, 1, 3, 3, 1, 3, 3, 3, 3, 3, 1, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 1, 3, 3, 1, 3, 3, 3, 0, 3, 3, 1, 1, 3, 3, 3, 0, 1, 3, 0, 1, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 1, 0, 0, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 1, 1, 3, 3, 1, 1, 0, 3, 1, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 1, 1, 1, 3, 1, 3, 0, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 0, 1, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 1, 3, 3, 3, 3, 3, 1, 3, 1, 0, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 0, 3, 1, 3, 3, 3, 1, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 1, 3, 3, 0, 3, 3, 3, 3, 1, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 3, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 2, 2, 2, 3, 2, 3, 2, 2, 2, 2, 2, 0, 2, 2, 3, 0, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 2, 3, 3, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 3, 3, 2, 2, 3, 2, 3, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 3, 2, 2, 1, 2, 2, 3, 2, 2, 3, 1, 3, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 3, 3, 2, 3, 2, 2, 2, 2, 2, 1, 0, 1, 3, 3, 3, 3, 3, 3, 1, 1, 3, 1, 1, 1, 1, 3, 3, 1, 1, 3, 1, 1, 0, 1, 3, 1, 3, 3, 3, 1, 0, 1, 3, 3, 1, 1, 0, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 0, 1, 3, 1, 1, 1, 0, 0, 3, 1, 3, 3, 3, 3, 3, 1, 1, 1, 3, 1, 1, 0, 3, 1, 3, 3, 3, 1, 3, 3, 1, 1, 3, 3, 1, 3, 1, 1, 1, 3, 1, 1, 3, 1, 3, 3, 1, 1, 3, 1, 1, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 1, 3, 1, 1, 1, 3, 1, 1, 3, 3, 3, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 3, 1, 3, 3, 1, 3, 1, 1, 3, 1, 3, 1, 1, 3, 3, 1, 3, 3, 1, 1, 1, 3, 3, 0, 1, 3, 1, 3, 0, 3, 1, 3, 0, 3, 1, 3, 3, 3, 1, 3, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 1, 0, 1, 3, 1, 1, 1, 1, 1, 3, 3, 0, 3, 1, 1, 1, 1, 0, 3, 3, 3, 3, 3, 1, 0, 3, 1, 3, 0, 1, 3, 3, 1, 1, 3, 0, 1, 3, 1, 1, 3, 3, 1, 1, 3, 1, 3, 0, 3, 1, 1, 1, 3, 3, 1, 3, 1, 3, 3, 3, 3, 1, 3, 1, 1, 3, 0, 0, 0, 1, 1, 0, 3, 1, 1, 3, 3, 1, 3, 1, 1, 1, 3, 3, 3, 3, 3, 0, 1, 3, 3, 1, 1, 3, 1, 1, 3, 1, 3, 0, 3, 3, 1, 3, 1, 1, 1, 1, 3, 0, 3, 3, 1, 3, 3, 3, 3, 0, 1, 1, 3, 1, 1, 1, 3, 1, 3, 1, 3, 3, 3, 1, 3, 1, 1, 1, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 1, 1, 3, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 1, 3, 3, 1, 1, 1, 3, 3, 3, 1, 1, 3, 1, 3, 3, 1, 1, 1, 0, 3, 0, 3, 3, 3, 3, 3, 1, 1, 3, 0, 0, 3, 1, 1, 3, 1, 1, 3, 3, 3, 0, 1, 3, 1, 1, 3, 1, 3, 3, 3, 3, 1, 3, 1, 3, 1, 0, 1, 1, 1, 3, 1, 1, 3, 1, 3, 1, 1, 3, 1, 3, 0, 1, 3, 1, 3, 1, 1, 1, 3, 1, 3, 3, 3, 3, 3, 1, 3, 1, 0, 1, 0, 1, 3, 3, 3, 1, 1, 3, 1, 1, 3, 3, 3, 1, 1, 3, 3, 3, 1, 1, 3, 0, 3, 1, 1, 3, 3, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 3, 3, 3, 1, 3, 3, 3, 3, 0, 1, 3, 3, 3, 3, 1, 1, 3, 1, 3, 3, 1, 3, 1, 0, 1, 1, 3, 1, 3, 0, 3, 1, 3, 1, 3, 3, 0, 1, 1, 0, 3, 1, 3, 1, 1, 1, 1, 3, 0, 1, 3, 1, 3, 3, 1, 3, 1, 1, 3, 3, 3, 1, 1, 0, 3, 3, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 0, 1, 3, 3, 3, 0, 1, 0, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 1, 0, 1, 3, 3, 3, 3, 3, 1, 3, 3, 1, 3, 1, 1, 3, 3, 3, 3, 3, 1, 3, 1, 3, 3, 1, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 1, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 0, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 1, 0, 3, 3, 3, 3, 3, 1, 3, 1, 3, 3, 1, 3, 3, 3, 1, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 1, 3, 3, 3, 0, 3, 3, 3, 3, 1, 3, 3, 0, 3, 3, 1, 1, 3, 3, 3, 3, 1, 3, 3], [1, 3, 1, 3, 3, 3, 3, 3, 3, 1, 0, 3, 3, 2, 2, 2, 3, 2, 3, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 3, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 3, 2, 3, 3, 2, 2, 3, 2, 3, 3, 2, 1, 2, 2, 3, 2, 2, 1, 2, 2, 1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 0, 2, 2, 2, 1, 2, 2, 3, 2, 2, 1, 2, 2, 2, 3, 2, 0, 2, 1, 2, 3, 2, 2, 2, 2, 2, 2, 1, 3, 3, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 3, 2, 1, 1, 2, 2, 2, 0, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 2, 0, 1, 2, 2, 2, 3, 3, 2, 2, 3, 2, 1, 2, 3, 2, 2, 3, 3, 2, 2, 1, 3, 3, 3, 3, 3, 1, 0, 3, 0, 3, 1, 3, 3, 1, 3, 3, 1, 1, 1, 1, 3, 1, 3, 1, 3, 1, 3, 0, 1, 0, 3, 1, 1, 0, 3, 1, 1, 3, 3, 0, 1, 3, 3, 3, 1, 3, 1, 3, 1, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 1, 1, 3, 3, 3, 1, 3, 3, 3, 0, 1, 1, 1, 3, 1, 1, 3, 3, 0, 3, 1, 3, 3, 0, 3, 1, 3, 0, 3, 3, 3, 1, 3, 1, 1, 3, 3, 1, 0, 3, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1, 1, 1, 1, 3, 1, 1, 3, 3, 0, 3, 3, 0, 1, 1, 3, 0, 3, 3, 3, 0, 3, 3, 3, 0, 1, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 1, 1, 3, 3, 1, 1, 1, 1, 1, 3, 3, 1, 3, 3, 3, 0, 3, 3, 3, 3, 1, 3, 1, 1, 3, 3, 1, 3, 1, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 3, 3, 1, 3, 0, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 0, 3, 3, 1, 3, 0, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 3, 1, 0, 0, 1, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 1, 3, 1, 1, 3, 3, 3, 3, 1, 3, 1, 3, 3, 1, 3, 3, 3, 3, 1, 3, 1, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 0, 1, 3, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 3, 1, 1, 3, 1, 3, 3, 3, 3, 3, 1, 3, 1, 3, 0, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 1, 1, 3, 1, 1, 1, 3, 1, 3, 3, 1, 3, 3, 3, 3, 0, 3, 1, 1, 1, 0, 1, 3, 3, 1, 3, 0, 3, 3, 3, 0, 1, 1, 1, 3, 3, 1, 3, 3, 3, 1, 3, 1, 3, 1, 1, 1, 3, 3, 3, 1, 3, 3, 1, 1, 1, 3, 3, 3, 0, 1, 3, 3, 1, 3, 1, 3, 3, 1, 3, 1, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 3, 3, 3, 3, 1, 3, 1, 1, 0, 3, 3, 3, 0, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 3, 1, 0, 3, 1, 1, 1, 1, 1, 3, 1, 1, 3, 3, 1, 1, 3, 0, 1, 3, 3, 1, 1, 1, 3, 1, 1, 3, 0, 3, 1, 1, 0, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 1, 3, 3, 1, 3, 3, 3, 3, 0, 3, 3, 1, 1, 1, 0, 3, 1, 3, 3, 1, 3, 0, 1, 3, 1, 1, 3, 3, 3, 3, 1, 3, 1, 0, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 1, 0, 3, 3, 0, 1, 1, 3, 3, 1, 1, 1, 3, 3, 3, 1, 3, 3, 1, 3, 3, 0, 3, 1, 1, 3, 3, 3, 3, 1, 3, 3, 1, 3, 1, 1, 1, 0, 1, 0, 3, 1, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 1, 0, 1, 3, 1, 1, 3, 1, 3, 3, 1, 3, 1, 3, 1, 1, 1, 1, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 1, 3, 1, 1, 3, 3, 1, 0, 3, 3, 1, 3, 1, 1, 3, 3, 3, 3, 3, 1, 3, 1, 3, 3, 1, 3, 1, 3, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 0, 3, 3, 3, 3, 3, 1, 3, 1, 3, 3, 3, 3, 1, 3, 1, 3, 3, 1, 3, 3, 3, 0, 3, 3, 1, 3, 3, 3, 3, 3, 1, 1, 1, 3, 1, 3, 3, 0, 3, 1, 0, 1, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 1, 3, 3, 1, 3, 1, 3, 3, 3, 3, 3, 0, 3, 1, 3, 3, 3, 3, 0, 3, 0, 3, 1, 1, 3, 3, 3, 1, 3, 3, 3, 1, 1, 1, 3, 3, 1, 1, 3, 3, 3, 3, 0, 1, 3, 0, 3, 0, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 3, 2, 2, 2, 3, 3, 2, 2, 3, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 3, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 2, 0, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 3, 2, 3, 2, 2, 3, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 0, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 0, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 3, 2, 2, 2, 3, 2, 3, 3, 2, 2, 2, 3, 2, 3, 2, 2, 2, 3, 2, 3, 2, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 1, 2, 3, 2, 1, 2, 2, 0, 1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 2, 0, 3, 2, 2, 3, 3, 2, 3, 2, 2, 3, 2, 3, 3, 3, 2, 2, 2, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 3, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]\n","Action list's shape looks like  (5,)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  return array(a, dtype, copy=False, order=order)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"l7sokqEUtrFY"},"source":["Action 的分布\n"]},{"cell_type":"code","metadata":{"id":"WHdAItjj1nxw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623347349998,"user_tz":-480,"elapsed":18,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"185c36c8-7548-4880-ff3d-92db4e1c3158"},"source":["distribution = {}\n","for actions in action_list:\n","  for action in actions:\n","    if action not in distribution.keys():\n","      distribution[action] = 1\n","    else:\n","      distribution[action] += 1\n","print(distribution)"],"execution_count":287,"outputs":[{"output_type":"stream","text":["{1: 1012, 3: 1760, 2: 456, 0: 179}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ricE0schY75M"},"source":["儲存 Model Testing的結果\n"]},{"cell_type":"code","metadata":{"id":"GZsMkGmIY42b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623347349998,"user_tz":-480,"elapsed":13,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"5fed4bc9-8736-4e09-b07e-693b50ab3174"},"source":["PATH = \"Action_List_test.npy\" # 可以改成你想取的名字或路徑\n","np.save(PATH ,np.array(action_list)) "],"execution_count":288,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"asK7WfbkaLjt"},"source":["### 你要交到JudgeBoi的檔案94這個\n","儲存結果到本地端 (就是你的電腦裡拉 = = )\n"]},{"cell_type":"code","metadata":{"id":"c-CqyhHzaWAL","colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"status":"ok","timestamp":1623347349999,"user_tz":-480,"elapsed":12,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"084b280e-b58d-4ac7-ec12-4fc658a40d2d"},"source":["from google.colab import files\n","files.download(PATH)"],"execution_count":289,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_bc9de3ba-d16e-4124-a7d8-fbd2ae61d2b0\", \"Action_List_test.npy\", 7121)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"seT4NUmWmAZ1"},"source":["# Server 測試\n","到時候下面會是我們Server上測試的環境，可以給大家看一下自己的表現如何"]},{"cell_type":"code","metadata":{"id":"U69c-YTxaw6b","colab":{"base_uri":"https://localhost:8080/","height":411},"executionInfo":{"status":"ok","timestamp":1623347632647,"user_tz":-480,"elapsed":5526,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"bc0fcbf8-a6be-461d-ca9b-71a8f8d77404"},"source":["action_list = np.load(PATH,allow_pickle=True) #到時候你上傳的檔案\n","seed = 543 #到時候測試的seed 請不要更改\n","fix(env, seed)\n","\n","agent.network.eval()  # 測試前先將 network 切換為 evaluation 模式\n","\n","test_total_reward = []\n","for actions in action_list:\n","  state = env.reset()\n","  img = plt.imshow(env.render(mode='rgb_array'))\n","\n","  total_reward = 0\n","\n","  done = False\n","  # while not done:\n","  done_count = 0\n","  for action in actions:\n","      # action, _ = agent1.sample(state)\n","      state, reward, done, _ = env.step(action)\n","      done_count += 1\n","      total_reward += reward\n","      if done:\n","        \n","        break\n","    #   img.set_data(env.render(mode='rgb_array'))\n","    #   display.display(plt.gcf())\n","    #   display.clear_output(wait=True)\n","  print(f\"Your reward is : %.2f\"%total_reward)\n","  test_total_reward.append(total_reward)"],"execution_count":292,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/torch/__init__.py:422: UserWarning: torch.set_deterministic is deprecated and will be removed in a future release. Please use torch.use_deterministic_algorithms instead\n","  \"torch.set_deterministic is deprecated and will be removed in a future \"\n"],"name":"stderr"},{"output_type":"stream","text":["Your reward is : 120.78\n","Your reward is : 142.98\n","Your reward is : 126.11\n","Your reward is : -2.71\n","Your reward is : 249.03\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"TjFBWwQP1hVe"},"source":["# 你的成績"]},{"cell_type":"code","metadata":{"id":"GpJpZz3Wbm0X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623347354160,"user_tz":-480,"elapsed":22,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"4409b4ca-c03e-47b7-bd1f-fc5e184bfcac"},"source":["print(f\"Your final reward is : %.2f\"%np.mean(test_total_reward))"],"execution_count":291,"outputs":[{"output_type":"stream","text":["Your final reward is : 127.23\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wUBtYXG2eaqf"},"source":["## 參考資料\n","\n","以下是一些有用的參考資料。\n","建議同學們實做前，可以先參考第一則連結的上課影片。\n","在影片的最後有提到兩個有用的 Tips，這對於本次作業的實做非常有幫助。\n","\n","- [DRL Lecture 1: Policy Gradient (Review)](https://youtu.be/z95ZYgPgXOY)\n","- [ML Lecture 23-3: Reinforcement Learning (including Q-learning) start at 30:00](https://youtu.be/2-JNBzCq77c?t=1800)\n","- [Lecture 7: Policy Gradient, David Silver](http://www0.cs.ucl.ac.uk/staff/d.silver/web/Teaching_files/pg.pdf)\n"]},{"cell_type":"markdown","metadata":{"id":"cGqP2EU1joWM"},"source":[""]}]}