{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"hwk 1","provenance":[{"file_id":"https://github.com/ga642381/ML2021-Spring/blob/main/HW01/HW01.ipynb","timestamp":1615394557429}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"mz0_QVkxCrX3"},"source":["# **Homework 1: COVID-19 Cases Prediction (Regression)**"]},{"cell_type":"markdown","metadata":{"id":"ZeZnPAiwDRWG"},"source":["Objectives:\n","* Solve a regression problem with deep neural networks (DNN).\n","* Understand basic DNN training tips.\n","* Get familiar with PyTorch.\n"]},{"cell_type":"markdown","metadata":{"id":"Jx3x1nDkG-Uy"},"source":["# **Download Data**\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tMj55YDKG6ch","executionInfo":{"status":"ok","timestamp":1615637341781,"user_tz":-480,"elapsed":2081,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"1b075bdb-c183-4319-862e-5e48aa6aa171"},"source":["tr_path = 'covid.train.csv'  # path to training data\n","tt_path = 'covid.test.csv'   # path to testing data\n","\n","!gdown --id '19CCyCgJrUxtvgZF53vnctJiOJ23T5mqF' --output covid.train.csv\n","!gdown --id '1CE240jLm2npU-tdz81-oVKEF3T2yfT1O' --output covid.test.csv"],"execution_count":97,"outputs":[{"output_type":"stream","text":["Downloading...\n","From: https://drive.google.com/uc?id=19CCyCgJrUxtvgZF53vnctJiOJ23T5mqF\n","To: /content/covid.train.csv\n","100% 2.00M/2.00M [00:00<00:00, 31.7MB/s]\n","Downloading...\n","From: https://drive.google.com/uc?id=1CE240jLm2npU-tdz81-oVKEF3T2yfT1O\n","To: /content/covid.test.csv\n","100% 651k/651k [00:00<00:00, 10.3MB/s]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wS_4-77xHk44"},"source":["# **Import Some Packages**"]},{"cell_type":"code","metadata":{"id":"k-onQd4JNA5H","executionInfo":{"status":"ok","timestamp":1615637341782,"user_tz":-480,"elapsed":2068,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["# PyTorch\n","import torch\n","import torch.nn as nn\n","from torch.utils.data import Dataset, DataLoader\n","\n","# For data preprocess\n","import numpy as np\n","import csv\n","import os\n","\n","# For plotting\n","import matplotlib.pyplot as plt\n","from matplotlib.pyplot import figure\n","\n","myseed = 42069  # set a random seed for reproducibility\n","torch.backends.cudnn.deterministic = True\n","torch.backends.cudnn.benchmark = False\n","np.random.seed(myseed)\n","torch.manual_seed(myseed)\n","if torch.cuda.is_available():\n","    torch.cuda.manual_seed_all(myseed)"],"execution_count":98,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BtE3b6JEH7rw"},"source":["# **Some Utilities**\n","\n","You do not need to modify this part."]},{"cell_type":"code","metadata":{"id":"FWMT3uf1NGQp","executionInfo":{"status":"ok","timestamp":1615637341783,"user_tz":-480,"elapsed":2063,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["def get_device():\n","    ''' Get device (if GPU is available, use GPU) '''\n","    return 'cuda' if torch.cuda.is_available() else 'cpu'\n","\n","def plot_learning_curve(loss_record, title=''):\n","    ''' Plot learning curve of your DNN (train & dev loss) '''\n","    total_steps = len(loss_record['train'])\n","    x_1 = range(total_steps)\n","    x_2 = x_1[::len(loss_record['train']) // len(loss_record['dev'])]\n","    figure(figsize=(6, 4))\n","    plt.plot(x_1, loss_record['train'], c='tab:red', label='train')\n","    plt.plot(x_2, loss_record['dev'], c='tab:cyan', label='dev')\n","    plt.ylim(0.0, 5.)\n","    plt.xlabel('Training steps')\n","    plt.ylabel('MSE loss')\n","    plt.title('Learning curve of {}'.format(title))\n","    plt.legend()\n","    plt.show()\n","\n","\n","def plot_pred(dv_set, model, device, lim=35., preds=None, targets=None):\n","    ''' Plot prediction of your DNN '''\n","    if preds is None or targets is None:\n","        model.eval()\n","        preds, targets = [], []\n","        for x, y in dv_set:\n","            x, y = x.to(device), y.to(device)\n","            with torch.no_grad():\n","                pred = model(x)\n","                preds.append(pred.detach().cpu())\n","                targets.append(y.detach().cpu())\n","        preds = torch.cat(preds, dim=0).numpy()\n","        targets = torch.cat(targets, dim=0).numpy()\n","\n","    figure(figsize=(5, 5))\n","    plt.scatter(targets, preds, c='r', alpha=0.5)\n","    plt.plot([-0.2, lim], [-0.2, lim], c='b')\n","    plt.xlim(-0.2, lim)\n","    plt.ylim(-0.2, lim)\n","    plt.xlabel('ground truth value')\n","    plt.ylabel('predicted value')\n","    plt.title('Ground Truth v.s. Prediction')\n","    plt.show()"],"execution_count":99,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TQ-MdwpLL7Dt"},"source":["## **Dataset**\n","\n","The `COVID19Dataset` below does:\n","* read `.csv` files\n","* extract features\n","* split `covid.train.csv` into train/dev sets\n","* normalize features"]},{"cell_type":"code","metadata":{"id":"0zlpIp9ANJRU","executionInfo":{"status":"ok","timestamp":1615637341784,"user_tz":-480,"elapsed":2059,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["class COVID19Dataset(Dataset):\n","    ''' Dataset for loading and preprocessing the COVID19 dataset '''\n","    def __init__(self,\n","                 path,\n","                 mode='train',\n","                 target_only=False):\n","        self.mode = mode\n","\n","        # Read data into numpy arrays\n","        with open(path, 'r') as fp:\n","            data = list(csv.reader(fp))\n","            data = np.array(data[1:])[:, 1:].astype(float)\n","        \n","        if not target_only:\n","            feats = list(range(93))\n","        else:\n","            # TODO: 40 states， test_positive, wear_mask, travel outside\n","            feats = list(range(40)) + [57,75,44,62,50,68,40,58,41,59,42,60,43,61,45,63,46,64,47,65,48,66,49,67,50,68,51,69]\n","            pass\n","\n","        if mode == 'test':\n","            # Testing data\n","            # data: 893 x 93 (40 states + day 1 (18) + day 2 (18) + day 3 (17))\n","            data = data[:, feats]\n","            self.data = torch.FloatTensor(data)\n","        else:\n","            # Training data (train/dev sets)\n","            # data: 2700 x 94 (40 states + day 1 (18) + day 2 (18) + day 3 (18))\n","            target = data[:, -1]\n","            data = data[:, feats]\n","            \n","            # Splitting training data into train & dev sets\n","            if mode == 'train':\n","                indices = [i for i in range(len(data)) if i % 10 != 0]\n","            elif mode == 'dev':\n","                indices = [i for i in range(len(data)) if i % 10 == 0]\n","            \n","            # Convert data into PyTorch tensors\n","            self.data = torch.FloatTensor(data[indices])\n","            self.target = torch.FloatTensor(target[indices])\n","\n","        # Normalize features (you may remove this part to see what will happen)\n","        self.data[:, 40:] = \\\n","            (self.data[:, 40:] - self.data[:, 40:].mean(dim=0, keepdim=True)) \\\n","            / self.data[:, 40:].std(dim=0, keepdim=True)\n","\n","        self.dim = self.data.shape[1]\n","\n","        print('Finished reading the {} set of COVID19 Dataset ({} samples found, each dim = {})'\n","              .format(mode, len(self.data), self.dim))\n","\n","    def __getitem__(self, index):\n","        # Returns one sample at a time\n","        if self.mode in ['train', 'dev']:\n","            # For training\n","            return self.data[index], self.target[index]\n","        else:\n","            # For testing (no target)\n","            return self.data[index]\n","\n","    def __len__(self):\n","        # Returns the size of the dataset\n","        return len(self.data)"],"execution_count":100,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AlhTlkE7MDo3"},"source":["## **DataLoader**\n","\n","A `DataLoader` loads data from a given `Dataset` into batches.\n"]},{"cell_type":"code","metadata":{"id":"hlhLk5t6MBX3","executionInfo":{"status":"ok","timestamp":1615637341785,"user_tz":-480,"elapsed":2054,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["def prep_dataloader(path, mode, batch_size, n_jobs=0, target_only=False):\n","    ''' Generates a dataset, then is put into a dataloader. '''\n","    dataset = COVID19Dataset(path, mode=mode, target_only=target_only)  # Construct dataset\n","    dataloader = DataLoader(\n","        dataset, batch_size,\n","        shuffle=(mode == 'train'), drop_last=False,\n","        num_workers=n_jobs, pin_memory=True)                            # Construct dataloader\n","    return dataloader"],"execution_count":101,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SGuycwR0MeQB"},"source":["# **Deep Neural Network**\n","\n","`NeuralNet` is an `nn.Module` designed for regression.\n","The DNN consists of 2 fully-connected layers with ReLU activation.\n","This module also included a function `cal_loss` for calculating loss.\n"]},{"cell_type":"code","metadata":{"id":"49-uXYovOAI0","executionInfo":{"status":"ok","timestamp":1615637341785,"user_tz":-480,"elapsed":2049,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["class NeuralNet(nn.Module):\n","    ''' A simple fully-connected deep neural network '''\n","    def __init__(self, input_dim):\n","        super(NeuralNet, self).__init__()\n","        # TODO: How to modify this model to achieve better performance?\n","        self.net = nn.Sequential(\n","            nn.Linear(input_dim, 100),\n","            nn.ReLU(),\n","            nn.ReLU(),\n","            nn.Linear(100, 1),\n","            nn.ReLU(),\n","            nn.ReLU(),\n","            nn.ReLU(),\n","            nn.ReLU(),\n","            nn.ReLU(),\n","            nn.ReLU(),\n","            nn.ReLU()\n","        )\n","        # Mean squared error loss\n","        self.criterion = nn.MSELoss(reduction='mean')\n","\n","    def forward(self, x):\n","        ''' Given input of size (batch_size x input_dim), compute output of the network '''\n","        return self.net(x).squeeze(1)\n","\n","    def cal_loss(self, pred, target):\n","        ''' Calculate loss '''\n","        # TODO: you may implement L2 regularization here\n","        return self.criterion(pred, target)"],"execution_count":102,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DvFWVjZ5Nvga"},"source":["# **Train/Dev/Test**"]},{"cell_type":"markdown","metadata":{"id":"MAM8QecJOyqn"},"source":["## **Training**"]},{"cell_type":"code","metadata":{"id":"lOqcmYzMO7jB","executionInfo":{"status":"ok","timestamp":1615637341786,"user_tz":-480,"elapsed":2044,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["def train(tr_set, dv_set, model, config, device):\n","    ''' DNN training '''\n","\n","    n_epochs = config['n_epochs']  # Maximum number of epochs\n","\n","    # Setup optimizer\n","    optimizer = getattr(torch.optim, config['optimizer'])(\n","        model.parameters(), **config['optim_hparas'])\n","\n","    min_mse = 1000.\n","    loss_record = {'train': [], 'dev': []}      # for recording training loss\n","    early_stop_cnt = 0\n","    epoch = 0\n","    while epoch < n_epochs:\n","        model.train()                           # set model to training mode\n","        for x, y in tr_set:                     # iterate through the dataloader\n","            optimizer.zero_grad()               # set gradient to zero\n","            x, y = x.to(device), y.to(device)   # move data to device (cpu/cuda)\n","            pred = model(x)                     # forward pass (compute output)\n","            mse_loss = model.cal_loss(pred, y)  # compute loss\n","            mse_loss.backward()                 # compute gradient (backpropagation)\n","            optimizer.step()                    # update model with optimizer\n","            loss_record['train'].append(mse_loss.detach().cpu().item())\n","\n","        # After each epoch, test your model on the validation (development) set.\n","        dev_mse = dev(dv_set, model, device)\n","        if dev_mse < min_mse:\n","            # Save model if your model improved\n","            min_mse = dev_mse\n","            print('Saving model (epoch = {:4d}, loss = {:.4f})'\n","                .format(epoch + 1, min_mse))\n","            torch.save(model.state_dict(), config['save_path'])  # Save model to specified path\n","            early_stop_cnt = 0\n","        else:\n","            early_stop_cnt += 1\n","\n","        epoch += 1\n","        loss_record['dev'].append(dev_mse)\n","        if early_stop_cnt > config['early_stop']:\n","            # Stop training if your model stops improving for \"config['early_stop']\" epochs.\n","            break\n","\n","    print('Finished training after {} epochs'.format(epoch))\n","    return min_mse, loss_record"],"execution_count":103,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0hSd4Bn3O2PL"},"source":["## **Validation**"]},{"cell_type":"code","metadata":{"id":"yrxrD3YsN3U2","executionInfo":{"status":"ok","timestamp":1615637341787,"user_tz":-480,"elapsed":2039,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["def dev(dv_set, model, device):\n","    model.eval()                                # set model to evalutation mode\n","    total_loss = 0\n","    for x, y in dv_set:                         # iterate through the dataloader\n","        x, y = x.to(device), y.to(device)       # move data to device (cpu/cuda)\n","        with torch.no_grad():                   # disable gradient calculation\n","            pred = model(x)                     # forward pass (compute output)\n","            mse_loss = model.cal_loss(pred, y)  # compute loss\n","        total_loss += mse_loss.detach().cpu().item() * len(x)  # accumulate loss\n","    total_loss = total_loss / len(dv_set.dataset)              # compute averaged loss\n","\n","    return total_loss"],"execution_count":104,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"g0pdrhQAO41L"},"source":["## **Testing**"]},{"cell_type":"code","metadata":{"id":"aSBMRFlYN5tB","executionInfo":{"status":"ok","timestamp":1615637341787,"user_tz":-480,"elapsed":2034,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["def test(tt_set, model, device):\n","    model.eval()                                # set model to evalutation mode\n","    preds = []\n","    for x in tt_set:                            # iterate through the dataloader\n","        x = x.to(device)                        # move data to device (cpu/cuda)\n","        with torch.no_grad():                   # disable gradient calculation\n","            pred = model(x)                     # forward pass (compute output)\n","            preds.append(pred.detach().cpu())   # collect prediction\n","    preds = torch.cat(preds, dim=0).numpy()     # concatenate all predictions and convert to a numpy array\n","    return preds"],"execution_count":105,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SvckkF5dvf0j"},"source":["# **Setup Hyper-parameters**\n","\n","`config` contains hyper-parameters for training and the path to save your model."]},{"cell_type":"code","metadata":{"id":"NPXpdumwPjE7","executionInfo":{"status":"ok","timestamp":1615637341788,"user_tz":-480,"elapsed":2029,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["device = get_device()                 # get the current available device ('cpu' or 'cuda')\n","os.makedirs('models', exist_ok=True)  # The trained model will be saved to ./models/\n","target_only = True                   # TODO: Using 40 states & 2 tested_positive features\n","\n","# TODO: How to tune these hyper-parameters to improve your model's performance?\n","config = {\n","    'n_epochs': 1200,                # maximum number of epochs\n","    'batch_size': 90,               # mini-batch size for dataloader\n","    'optimizer': 'SGD',              # optimization algorithm (optimizer in torch.optim)\n","    'optim_hparas': {                # hyper-parameters for the optimizer (depends on which optimizer you are using)\n","        'lr': 0.001,                 # learning rate of SGD\n","        'momentum': 0.9             # momentum for SGD\n","                 \n","    },\n","    'early_stop': 200,               # early stopping epochs (the number epochs since your model's last improvement)\n","    'save_path': 'models/model.pth'  # your model will be saved here\n","}"],"execution_count":106,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6j1eOV3TOH-j"},"source":["# **Load data and model**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eNrYBMmePLKm","executionInfo":{"status":"ok","timestamp":1615637342260,"user_tz":-480,"elapsed":2495,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"7fb89a19-8bf2-4826-a256-9d2a9a274de4"},"source":["tr_set = prep_dataloader(tr_path, 'train', config['batch_size'], target_only=target_only)\n","dv_set = prep_dataloader(tr_path, 'dev', config['batch_size'], target_only=target_only)\n","tt_set = prep_dataloader(tt_path, 'test', config['batch_size'], target_only=target_only)"],"execution_count":107,"outputs":[{"output_type":"stream","text":["Finished reading the train set of COVID19 Dataset (2430 samples found, each dim = 68)\n","Finished reading the dev set of COVID19 Dataset (270 samples found, each dim = 68)\n","Finished reading the test set of COVID19 Dataset (893 samples found, each dim = 68)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FHylSirLP9oh","executionInfo":{"status":"ok","timestamp":1615637342261,"user_tz":-480,"elapsed":2490,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}}},"source":["model = NeuralNet(tr_set.dataset.dim).to(device)  # Construct model and move to device"],"execution_count":108,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sX2B_zgSOPTJ"},"source":["# **Start Training!**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GrEbUxazQAAZ","executionInfo":{"status":"ok","timestamp":1615637409360,"user_tz":-480,"elapsed":69583,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"172180ed-9ef0-4421-97fa-0a3357992b57"},"source":["model_loss, model_loss_record = train(tr_set, dv_set, model, config, device)"],"execution_count":109,"outputs":[{"output_type":"stream","text":["Saving model (epoch =    1, loss = 4.9079)\n","Saving model (epoch =    2, loss = 2.0919)\n","Saving model (epoch =    3, loss = 1.2853)\n","Saving model (epoch =    5, loss = 1.1258)\n","Saving model (epoch =    8, loss = 1.0185)\n","Saving model (epoch =   12, loss = 0.9579)\n","Saving model (epoch =   15, loss = 0.9463)\n","Saving model (epoch =   22, loss = 0.9303)\n","Saving model (epoch =   24, loss = 0.9023)\n","Saving model (epoch =   30, loss = 0.8903)\n","Saving model (epoch =   40, loss = 0.8757)\n","Saving model (epoch =   43, loss = 0.8705)\n","Saving model (epoch =   48, loss = 0.8622)\n","Saving model (epoch =   79, loss = 0.8577)\n","Saving model (epoch =   91, loss = 0.8486)\n","Saving model (epoch =  120, loss = 0.8457)\n","Saving model (epoch =  131, loss = 0.8358)\n","Saving model (epoch =  178, loss = 0.8285)\n","Saving model (epoch =  241, loss = 0.8201)\n","Saving model (epoch =  436, loss = 0.8164)\n","Finished training after 637 epochs\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"hsNO9nnXQBvP","executionInfo":{"status":"ok","timestamp":1615637409361,"user_tz":-480,"elapsed":69577,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"6bd794b9-ffc2-4dfe-e64d-d1ea8a14afbb"},"source":["plot_learning_curve(model_loss_record, title='deep model')"],"execution_count":110,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":350},"id":"3iZTVn5WQFpX","executionInfo":{"status":"ok","timestamp":1615637409704,"user_tz":-480,"elapsed":69912,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"6efeb676-6762-4e08-e34f-5325ee667618"},"source":["del model\n","model = NeuralNet(tr_set.dataset.dim).to(device)\n","ckpt = torch.load(config['save_path'], map_location='cpu')  # Load your best model\n","model.load_state_dict(ckpt)\n","plot_pred(dv_set, model, device)  # Show prediction on the validation set"],"execution_count":111,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 360x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"aQikz3IPiyPf"},"source":["# **Testing**\n","The predictions of your model on testing set will be stored at `pred.csv`."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O8cTuQjQQOon","executionInfo":{"status":"ok","timestamp":1615637409705,"user_tz":-480,"elapsed":69905,"user":{"displayName":"劉德駿","photoUrl":"","userId":"10755332246774080837"}},"outputId":"fff77b99-cfa7-4cff-d6ad-0200ee882653"},"source":["def save_pred(preds, file):\n","    ''' Save predictions to specified file '''\n","    print('Saving results to {}'.format(file))\n","    with open(file, 'w') as fp:\n","        writer = csv.writer(fp)\n","        writer.writerow(['id', 'tested_positive'])\n","        for i, p in enumerate(preds):\n","            writer.writerow([i, p])\n","\n","preds = test(tt_set, model, device)  # predict COVID-19 cases with your model\n","save_pred(preds, 'pred.csv')         # save prediction file to pred.csv"],"execution_count":112,"outputs":[{"output_type":"stream","text":["Saving results to pred.csv\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nfrVxqJanGpE"},"source":["# **Hints**\n","\n","## **Simple Baseline**\n","* Run sample code\n","\n","## **Medium Baseline**\n","* Feature selection: 40 states + 2 `tested_positive` (`TODO` in dataset)\n","\n","## **Strong Baseline**\n","* Feature selection (what other features are useful?)\n","* DNN architecture (layers? dimension? activation function?)\n","* Training (mini-batch? optimizer? learning rate?)\n","* L2 regularization\n","* There are some mistakes in the sample code, can you find them?"]}]}